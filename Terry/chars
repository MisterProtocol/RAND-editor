#!/usr/bin/perl -w
#documentation at end
$SIG{__WARN__} = sub {&bye($_[0]); };
$SIG{'INT'}=$SIG{'QUIT'}= sub {& bye("Caught Signal: $_[0]");};
$SIG{__DIE__}=sub{&bye;};

$maxLine=64;
$do_quote=1;
$do_hex=0;
$do_control=1;
$do_count=1;
$do_line=1;

$count=0;
$line="";
$lastChar="";#initial value not relevant


sub help
{
   print "Syntax: $0 [-q] [-x] [-c] [-h] [-m] [file ...]\n";
   exit(0);
}

sub man
{
   while(<DATA>)
      {print;}
   exit(0);
}

while(@ARGV && $ARGV[0] =~ /^-/)
{
  if($ARGV[0] eq '-')
     {last;}
  elsif($ARGV[0] eq "-q")
     {$do_quote=0;}
   elsif($ARGV[0] eq "-x")
     {$do_hex=1;}
   elsif($ARGV[0] eq "-c")
     {$do_control=0;}
   elsif($ARGV[0] eq "-h")
     {&help;}
   elsif($ARGV[0] eq "-m")
     {&man;}
   else
     {&bye("Unknown flag: $ARGV[0]");}
   shift @ARGV;
}

$interactive= @ARGV == 0 &&  -t(STDIN);
if($interactive)
  {&doAllInteractive}
else
  {&doAllNonInteractive;}
&bye;

sub doAllInteractive
{
    my($char);
    print "Start typing,\n\r";
    $ttySave=`stty -g`;
    system("stty raw opost -echo");
    while(1)
    {
	$char=getc(STDIN);
	oneChar($char);
	endQuote();
	endNonQuote();
	if(ord($char) == 127)
	   {last;}
	if(ord($char) == 4) # trw
	   {last;}
   }
}

sub doAllNonInteractive
{
    while(<>)
    {
       &oneInput($_);
    }
}


sub oneInput
{
  my($arg)=$_[0];
  my($length)=length($arg);
  my($position);
  for($position=0;$position<$length;++$position)
   {&oneChar(substr($arg,$position,1));}
}

sub oneChar
{
   my($oneCharacter)=$_[0];
   if($do_quote && &quoteable($oneCharacter))
       {&oneCharQuote($oneCharacter);}
   else
      {&oneCharNonQuote($oneCharacter);}
}

sub quoteable
{
   my($arg)=$_[0];
   if($arg eq "\"")
      {return 0;}
   my($ord)=ord($arg);
   return($ord >= 32 && $ord <= 126);
}

sub oneCharQuote
{
  &endNonQuote();
  my($char)=$_[0];
  if(!$do_line)
  {
     print "\"$char\"\n";
     return;
  }
  else
  {
      $line="$line$char";
      if(length($line)>$maxLine)
	{endQuote();}
  }
}

sub oneCharNonQuote
{
   &endQuote();
   my($char)=$_[0];
   if(!$do_count)
   {
       print &display($char)."\n";
       return;
   }
   elsif($count > 0 && $lastChar ne $char)
     {&endNonQuote;}
   $lastChar=$char;
   ++$count;
}

sub endQuote
{
  if($line ne "")
  {
    print "\"$line\"\n";
    $line="";
  }
}

sub endNonQuote
{
  if($count>1)
      { printf "%d%s\n",$count,&display($lastChar); }
   elsif($count==1)
      { printf "%s\n",&display($lastChar); }
 $count=0;
}

sub display
{
  $char=$_[0];
  $ord=ord($char);
  if($do_control && $ord==32)
     { return "<space>";};
  if($do_control && $ord==127)
     { return "<del>";};
  if($do_control && $ord< 32)
    {return '^'.chr($ord+64);}
  if($do_control && $char eq '"')
    { return "<quote>" };
  if($do_hex)
   {  return sprintf("<0x%x>",$ord);}
  return sprintf("<0%o>",$ord);
}

sub bye
{
  $message=$_[0];
  &endNonQuote;
  &endQuote;
  if($ttySave)
     { system("stty $ttySave");}
  if(!$message)
    {exit(0);};
  chomp($message);
  print STDERR "$0: $message\n";
  exit(1);
}
__END__

Flags must be in separate arguments and must precede all other arguments.
Possible flags are "-x", "-c" "-q" and "-h" and [-m]
The other arguments, if present, are the input. Otherwise, the input
is the standard input.

Definitions:

    A quotable character is a character which is inclusively between ' '
    (ASCII 040) and '~' (ASCII 176), and which is not  '"'.  However if
    a -q flag has been given no character is quotable.

    A control character is a character which is either inclusively between
    ASCII 000 and ASCII 037, or is '"' or 0177.  However, if a -c flag has
    been give, no character is a control character.

For each character in the input chars displays a human readable form
of the character. Consecutive quotable characters are shown inclosed
in quote marks. Each such string appears on a separate line.
More than 64 consecutive characters are presented as separate strings
of at most 64 characters each.

Consecutive occurrences of the same non-quotable character are shown
on a single line consisting of:

	Decimal digits giving the number of consecutive occurrences.
	(If there is only one consecutive occurrence the digits
	are omitted).

	A description of the character.

            Control characters are described in the form '<quote>','<del>'
            or '^X'.  Non-quotable, Non-control characters are described
            in the form '<0octal-digits>' or, if a -x flag has been given,
            in the form '<0xhexadecimal-digits>'.

A '-' flag means that the rest of the arguments are non-flag arguments,
even if they begin with a '-'.

A '-h' flag prints the syntax summary and exits.
A '-m' flag prints this documentation and exits.

If there are no non-flag arguments and the standard input is a terminal,
then chars acts in  interactive mode:

    All quoted strings include only one character, and counts are not
    used.

    The del character (and only the del character) terminates input.

    Character descriptions are echoed in response to user keystrokes.

Summary of flags:

- -   Do not regard subsequent arguments as flags.
- -c  Do not treat control characters specially.
- -h  Print a help message
- -q  Do not treat quotable characters specially.
- -x  Use hexadecimal instead of octal for non-control, non-quotable characters.

Bug: If you want to use chars interactively on systems without
the GNU stty command, then you may have to edit the following
two lines of chars:

    $ttySave=`stty -g`;
    system("stty raw opost -echo");

    Norman Shapiro
    5011 Mattos Ct
    Fremont CA 94536-7170
    (510) 795-1800
    Norman_Shapiro@rand.org

