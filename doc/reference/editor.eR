.pl 11i
.po .5i
.ll 7i
.\" For eR compatibility
.de se
.if "\\$1"ls" .ls \\$2
.if "\\$1"Ip" .nr Po \\$2n
.if "\\$1"ip" .nr ii \\$2n-\\n(Po
..
.rn h1 H1
.de h1
.H1 "\\$1" "\\$2"
.pp
..
.tc yes
.se ft 3
.se ls 1
.hx
.uh "TEXT PROCESSING"
.sp 15
.ce 6
\fBTHE RAND EDITOR, E


** Draft **

APRIL 1984
.sp 15
.ce 3
COMPUTER SERVICES DEPARTMENT
THE RAND CORPORATION\fR

.bp 1
.se ls 1
.mh "INTRODUCTION"
This reference manual presents many of the functions and
commands that are available in "E".  The level of
description used here assumes some prior experience with an editor.
.sp
.h1 "KEYSTROKE SYNTAX"
EXAMPLES in this document use
different typefaces and symbols to denote the keystrokes you must make on
your terminal keyboard:

.se Ip 5
.se ip 20
.ip <BRACKETS>
Angled brackets indicate that you must press a
key with a particular label on it.  Thus if you are told to press

.in 30
<CMD>

.in 20
you must press the key with the label CMD on it.
NOTE: all the terminal keyboards at Rand have had special keytops
made for this editor.  Users of unmodified terminals should
consult their local experts for directions on what keys perform
which functions inside of "E", or use the "E" standard keyboard
control characters.

.ip |KEY+KEY|
Vertical lines indicate that you must hold down the first key and then
press the second one.  Thus if you are told to press

.in 30
|CTRL+B|

.in 20
you must hold down the CTRL key and then press the B key.

.mh "THE RAND EDITOR E"
.h1 "ABORTING A COMMAND"
A command can be aborted or stopped before it is completed by pressing
<INT>.  This method is effective
for aborting commands that take some time to execute such as fill,
justify, and search.  Commands that happen
instantaneously, such as open and close, usually cannot be aborted.

A command that has been typed but not executed (i.e., <RETURN> has not
yet been pressed), can be aborted by backspacing over the command
and erasing it.  The command mode can then be turned off by pressing <RETURN>.
.sp
.h1 "ABORTING A SESSION"
To abort an entire editing session press <CMD> \fBexit abort\fR <RETURN>
(where \fBexit abort\fR can be abbreviated \fBex a\fR).  Exiting a file with the
abort option looses all work done during the editing session.

If a user aborts a session and then
types \fBe\fR, the Editor will prompt
the user with four options, one of which is a visible replay (option 2).
The
user can initiate the replay, watch it occur, and interrupt it before the end
by pressing <INT>, thus saving some of the work.
(See also \fIEXIT\fR and \fIRECOVERY\fR.)
.sp
.h1 "ALTERNATE FILE"
An alternate file can be created while in the Editor, by pressing:
<CMD> \fBe \fR\fIfilename\fR <RETURN>.
This causes the current file to become the alternate file, and
\fIfilename\fR to become the current file.  To alternate between these two
files, a user presses <ALT>.  A user can also alternate between
these two files by pressing <CMD> \fBe\fR <RETURN>.  A number of files can be
used in the alternate mode, although you must press <CMD> \fBe \fR and type in
the filename you wish to change to.

Work done in alternate files will all be saved upon exiting from the session.
.sp
.h1 "AREA"
An area is any part of a file; it can be as small as one
character and as large as the entire file.

The area may be a default area such as the default area for the fill
command (1 paragraph), or the area may be explicitly defined in the
instruction as for example, \fBfill \fR\fI2l\fR, which will fill 2 lines,
or \fBfill \fR\fI5p\fR which will fill 5 paragraphs.  In defining an area, the
letter "p" defines paragraphs and the letter "l" (ell) defines lines.

An area can also be defined by cursor movements or arrow keys.  An area
defined by cursor movements must be marked.  The
marked area can be a few words, a single line, several
paragraphs, or a rectangle.  An area is marked by pressing
<MARK> and moving the cursor.  Cursor movement is accomplished by
<\*G\(->\fR>, <\*G\(<-\fR>, <\*G\(ua\fR>, <\*G\(da\fR>,
<RETURN>, <+PAGE>, <-PAGE>, <+LINE>,
<-LINE>, and certain sequences involving <+SCH> and <-SCH>.
A marked area can be used as the area for <OPEN>,
<CLOSE>, <PICK> and <ERASE>.  If that marked area is a series of
lines or paragraphs, the marked area can also be used as the area for fill,
justify, center, and replace.
.sp
.h1 "<ARROW KEYS>"
The arrow keys are represented in this publication as
<\*G\(->\fR>, <\*G\(<-\fR>, <\*G\(ua\fR>, and <\*G\(da\fR>.
These keys move the cursor without changing the text the
cursor moves past (as opposed to <SPACE BAR> and <BSP>).

When the cursor is at the right side of the window, and <\*G\(->\fR>
is pressed, the window is moved so that the cursor remains
visible.  This also occurs when the cursor is at the top, bottom, or
left edge of the window.  At the left edge though, the cursor (and
the window) cannot go to the left of column 1.  At the top, the cursor
cannot go higher than line 1.

When <CMD> is pressed and then an arrow
key is pressed, the cursor moves to the edge of the window in
the direction desired.
For example,
the keystroke sequence
<CMD> <\*G\(->\fR> first moves the cursor to the end of the
text on the line, and if pressed a second time,
moves the cursor to the right edge of the window.
The keystroke sequence <CMD> <\*G\(<-\fR> moves
the cursor to the left edge of the window.
The keystroke sequence <CMD> <\*G\(ua\fR> will take the cursor to the top
of the window in the same column.
The keystroke sequence <CMD> <\*G\(da\fR> stops at the bottom of the window,
in the same column,
if the file extends to the bottom of the window.  If the file does not extend
to the bottom of the window, <CMD> <\*G\(da\fR>, first stops at the
end of the file, and if pressed again,
goes to the bottom edge of the window.

Arrow keys generally will work only if the version of the editor
that you are using has been compiled to support your terminal type.
.sp
.h1 "BACKSPACE"
To backspace the cursor and erase a character, press <BSP>.
To backspace the cursor without erasing, press
<\*G\(<-\fR>.

Backspace characters can be added to a text line by pressing
<CNTL CHAR> |SHIFT+H|.  The first
keystroke combination generates a small, bright block.
The second keystroke
combination signals the Editor to put a backspace character in the text.
This backspace character can be part of an underlining process. (See also
\fI<BSP>,\fR
and \fIUNDERLINING\fR.)
.sp
.h1 "BACKUP FILE"
If a user edits a file and exits normally from the
Editor, a copy of the file as it existed before the editing
session is kept by the Editor.  The Editor does this by copying the existing file
and renaming the copy with the same name as the original but with a comma in front of it.
For example, a file named \fImemo\fR, is backed up as a file named
\fI,memo\fR.  These files are called comma files.
If the
user exits with the abort option, \fBexit abort\fR, or if the system
crashes, no backup file
is created (and any previous backup file is left untouched).  The comma file
is made in the same user directory that the original file is in.
All
comma files are
deleted automatically late each evening.

A comma file is created to protect the user from inadvertent
mistakes.  For example, if a user begins to edit the same
file again later in the day and discovers that the previous
editing session contained a serious error, the user would
have several choices.  First, the user could exit with the
abort option and copy the comma file into the current
file.  For example,
\fB% cp \fR\fI,memo memo\fR.
Or the user, without exiting from the Editor, could
call up the backup file as the alternate file and restore that
section of the file that contained the editing error. (See
\fIMOVING TEXT BETWEEN FILES\fR.)

.sp
.h1 "BACKWARD SEARCH"
To search backward in the file for a word or series of words,
press <CMD> \fIword\fR <-SCH>.
To find additional
occurrences, continue pressing <-SCH> until the message "Search key not
found" appears on the screen.

.sp
.h1 "BOX"
The box command draws a box around a specified area, just inside the marked
or specified area.  The "|" and "-" characters are used for the vertical
and horizontal markings and corners are displayed as "+".
First mark off the area using <MARK>
<\*G\(<-\fR> <\*G\(da\fR>.
Then press
<CMD> \fBbox\fR <RETURN>.  Horizontal and vertical lines can be drawn
using the box command by marking one direction only.

.sp
.h1 "<BSP>"
This is the backspace key.  This key has different functions depending
on whether the Editor is in Edit Mode or Insert Mode and whether the
<CMD> key is pressed.  The functions are:
.(b
Edit Mode:

	<BSP>                  Moves the cursor to the left one column
			       and blanks out any character there.

	<CMD> <BSP>            Blanks out all characters between the
			       cursor and the left margin.  Leaves the
			       cursor where it is.  (Deleted
			       characters placed in the erase buffer.)
Insert Mode:

	<BSP>                  Moves the cursor to the left one column
			       and deletes any character there.  The
			       text to the right of the cursor is moved
			       over one character to the left (following
			       the cursor).

	<CMD> <BSP>            Deletes all of the characters between the
			       cursor and the left margin.  Moves the
			       cursor and the remaining text to the right
			       margin.  (Deleted characters are placed in
			       the close buffer.)
.)b
(See also \fIBACKSPACE\fR.)
.sp
.h1 "CENTER"
The center command moves the text contained on a
line to the center of the line so that the number of
blanks on either side of the text is the same.  The line length by
which the center is determined is the "width"
specified in the last center, fill, or justify command, or the default
width of 75.  The
format of the command is, <CMD> \fBcenter\fR \fIn\fR <RETURN>,
where \fIn\fR is the optional
number of lines to center.  If \fIn\fR is omitted, one line is centered,
the line where the cursor is.
.sp
.h1 "CHANGES FILES"
The change file is maintained for the benefit of the
user.  It contains all of the text that has been centered, closed,
picked, filled, and justified.
A user can access the text in this file by referencing a
file
by pressing <CMD> \fBe #p\fR (all information
that has been picked), or \fB e #o \fR(all information that has been closed,
deleted, erased, filled, or justified).
This brings the text from the change file into
the editing window as an alternate file, and text can then be copied
using the pick key.
The user can return to the original file by pressing
<ALT>, and restore the text that was copied by pressing
<CMD> <PICK>.
.sp
.h1 "CHANGING FILES"
To alternate between the current file and the
alternate file, press <ALT>.
(See also \fIALTERNATE FILE\fR.)
.sp
.h1 "CHANGING WINDOWS"
If there are two windows, then pressing <CHG WIN> moves the
Editor between windows.  If there are more than two windows, then pressing
<CHG WIN> moves the Editor from window to window in the
order that the windows were created.  To move to a specific window press
<CMD> \fIn\fR <CHG WIN>, where \fIn\fR is the window number.
(See also \fIWINDOW\fR.)
.sp
.h1 "<CLOSE>"
The close key removes a line or lines from the file and
places those lines in the close buffer.  The most recently
closed line or lines can be restored to the file by pressing
<CMD> <CLOSE>.

Pressing the
close key by itself results in the closing of one line.  More
than one line can be closed by pressing <CMD> \fIn\fR <CLOSE>,
where n is the number of lines
to remove.

The mark function can be used with the close
function to close a few characters, a few words, a
few lines, a few paragraphs, or a rectangle.  To mark and
close, press <MARK> \fIcursor movements\fR <CLOSE>.

Material copied from the close buffer is placed in the change file.

Note that pressing <CMD> <BSP> while in Insert Mode replaces
the contents of the close buffer with newly deleted text.
(See also \fICHANGE FILE\fR and \fICLOSE\fR.)
.sp
.h1 "CLOSE"
The close command may be used instead of the close key to remove space.
To close out an area, the user presses <CMD> \fBclose \fR\fIn\fR
<RETURN>
(\fBclose\fR may be abbreviated \fBclo\fR),
where \fIn\fR is an optionally entered number
of lines.
The default area is
one line.

Text closed with either the close command or the close key may
be placed anywhere in the file by moving the cursor to that place
and pressing <CMD> <CLOSE> or <CMD> \fB-close\fR <RETURN>.

Note that pressing <CMD> <BSP> while in Insert Mode replaces the
contents of the close buffer with the newly deleted text.
(See also \fI<CLOSE>\fR.)
.sp
.h1 "CLOSE BUFFER"
The close buffer is a place in the Editor where the last closed
line(s) is saved.  Text is also placed in the close buffer when
<CMD> <BSP> is pressed while in Insert Mode.
Material remains in the close buffer until the close key is used to
remove line(s) or until the file is exited.
(See also \fICLOSE\fR and \fI<CLOSE>\fR.)
.sp
.h1 "<CMD>"
This key puts the Editor in the command mode so that commands may be
typed to the Editor followed by <RETURN>.  This key is also
used as part of many keystroke sequences that perform special
editor functions.
.sp
.h1 "COMBINING FILES"
Files can be combined using the Unix cat command.  Files can
also be combined using the Editor to pick text from an alternate
file.  (See \fIMOVING TEXT BETWEEN FILES\fR.)
.sp
.h1 "COMBINING LINES"
Two adjacent lines can be combined using the \fBjoin\fR command.
(See \fIJOIN\fR.)
.sp
.h1 "COMMA FILES"
See \fIBACKUP FILE\fR.
.sp
.h1 "COMMAND MODE"
The command mode is initiated by pressing <CMD>.  On some terminals
this key is labeled <ARG>, <BRK>, or <BRK/CMD>.
The prompt "CMD:"
appears below the window and a command can be entered.  The command line
may be edited by using
<INSERT>, <BSP>,
<\*G\(->\fR>, and <\*G\(<-\fR>.

The last command executed can be recovered to the command line by pressing
<CMD> <CMD> <ALT>.  This can then be
edited and executed again.

To negate a command, the user can backspace over the command,
thus erasing it, and then cancel the command mode by pressing <RETURN>.
To cancel a command, either a partially typed command or an executing
command, the user presses <INT>.
.sp
.h1 "COPYING FILES"
A file can be copied outside the Editor by use of the Unix copy command,
\fBcp\fR.

While in the Editor, information can be copied from one file
to another by editing the first file, bringing up the second
file as an alternate file, by pressing <CMD> \fBe \fR\fInewfilename\fR
<RETURN> and copying information using the pick
key, then alternating files by pressing <ALT>
and placing that information into the
first file by pressing <CMD> <PICK>.

A copy of the current file can be saved with a different name (as a new
file) by pressing <CMD> \fBsave \fR\fInewfilename\fR <RETURN>. (See also
\fIMOVING TEXT BETWEEN FILES\fR and \fISAVE\fR )
.sp
.h1 "COPYING TEXT"
Text can be copied within a file by
using the pick key.  Text can also be copied from one
file to another.  (See \fICOPYING FILES, MOVING TEXT BETWEEN
FILES\fR and \fI<PICK>\fR.)
.sp
.h1 "CRASHES, RECOVERY FROM"
If E crashes while editing, then
the user, while in the same directory, types (in response to
the Unix prompt of "%") \fBe\fR <RETURN>.  The Editor will
prompt the user with four options.
(See \fIRECOVERY\fR.)
.sp
.h1 "CREATING FILES"
If a file does not exist, it can be created by typing
\fBe\fR \fIfilename\fR <RETURN> in response to the Unix prompt of "%".
Then in response to the E prompt of "Do you want to create
\fIfilename\fR?", type \fBy\fR for yes).  (Filenames of no more than 12
letters or numbers
are recommended.)  (See \fIFILENAME\fR.)

A copy of the current file can be saved with a different
name (as a new file) by pressing <CMD> \fBsave\fR \fInewfilename\fR <RETURN>.
(See \fISAVE\fR.)

.sp
.h1 "CREATING WINDOWS"
To create a window, the cursor must be either on the left or the top edge of
the window but not in the top left-hand corner.
A new window can be created with
a different file in it by pressing <CMD> \fBw\fR\fI filename\fR
<RETURN>.
A new window can be created with the current file
in it by pressing <CMD> \fBwindow\fR <RETURN>
(where \fBwindow\fR can be abbreviated \fBw\fR).  (See \fIDELETING WINDOWS,
WINDOWS\fR.)
.sp
.h1 "<CTRL>"
This key is the "control" key.  It shifts the keyboard into a
third case, in which many of the keys generate special
codes.  Pressing this key by itself does not generate a code;
another key must be pressed with it.  For example, |CTRL+A|
requires that the <CTRL> key be pressed and held, then press the
<A> key.  (This command will move the window to the
left.)  Many of these control functions have been replaced on the newer
terminals with function keys.
.sp
.h1 "CURRENT WINDOW"
The current window contains the cursor and is the
window in which editing can be done.   The current window is outlined in
bolder colons/semicolons; the alternate windows are
outlined in dots. (See also \fICHANGING WINDOWS\fR and \fIWINDOW\fR.)
.sp
.h1 "CURSOR"
The cursor is the character similar to an underline or block
character that the Editor uses to mark locations on the
screen.  The cursor marks the position where the next
character typed will be placed (and where it will print).  To
emphasize the cursor position, the Editor sometimes prints four bright
blocks at the four edges of the screen.  These four bright
blocks "target" the cursor.
.sp
.h1 "CURSOR MOVEMENT <\*G\(->\fR>, <\*G\(<-\fR>, <\*G\(ua\fR>, <\*G\(da\fR>"
The notation \fIcursor movement\fR is used to indicate
any movement of the cursor.  This movement can be performed by
pressing \%<-PAGE>, <+PAGE>, <-LINE>, <+LINE>,
<\*G\(->\fR>, <\*G\(<-\fR>, <\*G\(ua\fR>, <\*G\(da\fR>,
<RETURN>,
<BSP>, and <SPACE BAR>, and by some command sequences which
include the <+SCH> and <-SCH> keys.  Most
frequently \fIcursor movement\fR is used in marking a series of
lines or paragraphs or a rectangular area.
.sp
.h1 "<DEL CHAR>"
This key is located next to <INSERT> and is sometimes marked <DEL>.
This key deletes the character the cursor is on and moves the
characters to the
right of the cursor one space to the left.
Characters deleted with the del char key cannot be recovered.

To delete the character at the cursor and all of the
characters to the right on the same line,
press <CMD> <DEL CHAR>.  Characters deleted in this manner
enter the erase buffer.
.sp
.h1 "DELETE"
This command deletes the current file, that is, the file
being edited.  This is useful when creating and editing
multiple windows and files.  The current file is deleted (not
only within the Editor but within the file system) by
pressing <CMD> \fBdelete\fR <RETURN>.  Be CAREFUL to make sure you want
to delete the file with this command; there is no recovery.
This command takes effect upon
normal exit from the Editor.  To negate this command (and the entire editing
session), the user must exit with the abort option \fBexit abort\fR.
(See \fIEXIT\fR.)
.sp
.h1 "DELETING TEXT"
Single characters can be deleted by using the
<DEL CHAR> key.  This key deletes the character at the cursor.
The character at the cursor and all the
characters to the right can be deleted by
pressing
.br
<CMD> <DEL CHAR>.
Characters can be erased by pressing the space bar or
<BSP>.  (The backspace key has several deleting functions;
see \fI<BSP>\fR.)  Characters deleted using <CMD>
<DEL CHAR>
enter the erase buffer.

A line of text can be deleted by pressing <CLOSE>.  Several
lines of text can be deleted by pressing <CMD> \fIn\fR <CLOSE>
or
.br
<CMD> \fBclose \fR\fIn\fR <RETURN>,
where \fIn\fR is the number
of lines to delete.  The most recent line or set of lines
deleted in this fashion may be returned to the file
(in the same place or in other places) by pressing
<CMD> <CLOSE> or <CMD> \fB-close\fR <RETURN>.

A rectangular area can be deleted by first marking
the area and then pressing <CLOSE>.  An area is marked
by moving the cursor to one corner of the area, pressing
<MARK>, and then moving the cursor
to the opposite corner of the area.  At this point the
<CLOSE> key can be pressed.  (See <MARK>.)
.sp
.h1 "DELETING WINDOWS"
The last window created can be removed from the screen by pressing <CMD>
\fB-window\fR <RETURN> (where \fB-window\fR can be abbreviated \fB-w\fR).
(See \fICREATING WINDOWS\fR and \fIWINDOWS\fR.)
.sp
.h1 "<DOWN ARROW>"
See \fI<ARROW KEYS>\fR.
.sp
.h1 "\&.ec1"
This is the filename of the change file if the user owns the directory.
In this file are all changes made during the current editing session.
This file exists only during an editing session and is deleted automatically
when you exit from the file.  If you "crash" or "exit abort" from the file,
it is saved for recovery purposes.
.sp
.h1 "\&.ek1"
This is the filename of the keystroke file if the user owns the directory.
In this file are all changes made during the current editing session.
This file exists only during an editing session and is deleted automatically
when you exit from the file.  If you "crash" or "exit abort" from the file,
it is saved for recovery purposes.
.sp
.h1 "\&.ek1b"
This is the filename of the backup keystroke file used during recovery
if the user owns the directory.
.sp
.h1 "\&.es1"
This is the filename of the state file if the user owns the directory.
This file is created every time you exit from the editor and keeps track
of the last file edited, and your cursor location upon exiting.
This allows you to type \fBe\fR and be able to edit the last file you
worked on without specifying a filename.
.sp
.h1 "E"
The name of the Editor is E.  To work in a file, a user
types \fBe\fR or \fBe\fR \fIfilename\fR.
.sp
.h1 "EDIT MODE"
Edit mode is the mode of the Editor in which new text that is typed
overlays any existing text.  Edit mode is the default
mode of the Editor, the mode the Editor is in after the user types
\fBe\fR \fIfilename\fR.  (See also \fICOMMAND MODE\fR and \fIINSERT\fR.)
.sp
.h1 "EFFICIENCY"
The Editor works most efficiently if it is exited
every half hour.  This practice is also recommended as a
precaution against system failures in which all
editing during a session can be destroyed.
.sp
.h1 "ERASE"
A line or area can be erased (blanked out) by pressing <CMD>
\fBerase\fR \fIarea\fR <RETURN>
(where \fBerase\fR can be abbreviated \fBer\fR).
The default area is one line.  The erased text
from the last erase command is held in the erase buffer from
where it can be retrieved using the \fB-erase\fR command.

Note that <CMD> <DEL CHAR> while in edit mode,
replace the contents of the erase buffer with newly deleted text.
.sp
.h1 "<ERASE>"
Ambassador terminals have an erase key which can be used instead of the
erase command.  Pressing <ERASE> will erase one line.  More than one
line may be erased by pressing <CMD> \fIn\fR <ERASE>, where n is the
number of lines to be erased or by using mark and <ERASE>.  Erased
text may be retrieved from the erase buffer by <CMD> <ERASE>.

Note that <CMD> <DEL CHAR> while in edit mode,
replace the contents of the erase buffer with newly deleted text.
.sp
.h1 "-ERASE"
The last text erased using the \fBerase\fR command can be inserted
into the file by pressing <CMD> \fB-erase\fR <RETURN> (where \fB-erase\fR
may be abbreviated \fB-er\fR).  This insertion
moves existing text to the right and, consequently, entering
the command \fBerase\fR followed by the command \fB-erase\fR may
not restore the text to its original position.

Note that <CMD> <DEL CHAR> while in edit mode,
replaces the contents of the erase buffer with newly deleted text.
.sp
.h1 "ERASING EXTRANEOUS CHARACTERS"
Occasionally extraneous characters
appear in the editing window, characters that are not part
of the edited file (for example, a message from the
system operator).  Sometimes these characters are called "noise" or
"garbage" characters.
To remove these characters, press
<CMD> \fBredraw\fR <RETURN> (where \fBredraw\fR can be abbreviated \fBred\fR).
This command redraws the window and clears it of extraneous
characters.
.sp
.h1 "ERASING TEXT"
Normally text is erased by spacing over it with
the space bar or backspacing over it with <BSP>.  The
backspace key has several options.
Text can also be erased using the erase command or <ERASE>.
Text to the right of the cursor can be erased using <CMD> <DEL CHAR>.
(See also \fI<BSP>, <DEL CHAR>, DELETING TEXT\fR, \fIERASE\fR and <ERASE>.)
.sp
.h1 "EXECUTE A FUNCTION"
Some UNIX commands can be executed while in the editor by pressing
.(b
<CMD> \fBrun\fR \fIarea command\fR <RETURN>
.)b
For example, to run the Unix command "ls" and have
the output included in the file being edited, press
<CMD> \fBrun\fR \fIls\fR <RETURN>.

Note that the output from a command
can vary depending on when it is run, and consequently
a replay of the editing session that includes a run command
can produce disastrous results.

For knowledgeable Unix users only: \fBarea\fR is passed to the
standard input of the command and is replaced by the
output of the command.
(See also \fIAREA\fR)
.sp
.h1 "EXIT"
A user can exit from the Editor by pressing <CMD> \fBexit\fR <RETURN>
(where \fBexit\fR may be abbreviated \fBex\fR or \fBb\fR).
A user can exit from the
Editor and abort the editing session by pressing <CMD>
\fBexit abort\fR <RETURN>.  A user can then replay that session by
returning to the same directory and
typing \fBe\fR.  The Editor will prompt the user with
four options, one of which is a visible replay (option 2).  The user can
initiate the replay, watch it occur, and then interrupt it
before it ends by pressing <INT> thus only saving that work
which you saw replayed.

Note that a replay of a short session is difficult to
interrupt unless the user has good reflexes.

You may also exit from the editor with the following options:  \fBexit
nosave\fR which exits you from the file without saving it; \fBexit quit\fR
which is like exit abort, but deletes the keystroke file; \fBexit dump\fR
which is similar to exit abort.
.sp
.h1 "FILENAME"
A filename can be up to 14 characters long, but filenames of 12 characters
or less are recommended for several practical reasons which will
not be detailed here.  Filenames can contain
any letter or number.  If a blank is placed in a
filename, the characters up to the blank are used as the filename;
the characters after the blank may be treated as another filename
or treated as an argument, or ignored, depending on how the filename
is being used.  The Unix operating
system attaches special meaning to certain characters
in the filenames.  A filename beginning with a period
(".") should be avoided, as well as a filename beginning
with a comma (",") and files named core and a.out.

It is highly recommended that filenames
contain only numbers and lower case letters.

Filenames under the 4.2BSD version of Unix can be much longer than 14
characters.
.sp
.h1 "FILES"
A file is a collection of text saved on a disk pack with an
individual identifying name.
Files can be created using the Editor, \fBe\fR\fI filename\fR, or by
various Unix commands such as \fBcp\fR \fIfilea fileb\fR.
(See also \fIALTERNATE FILE, BACKUP FILE, CREATING FILES\fR, and
\fIFILENAME\fR.)
.sp
.h1 "FILL"
The fill command moves words so that each line is
filled with words up to, but not beyond, the right
margin. (The right margin is set by the "width"
entered in the last fill, center, or justify
command, or is the default width of 75.) A
paragraph is filled by moving the cursor to the
first line of a paragraph and pressing <CMD>
\fBfill\fR <RETURN> (where \fBfill\fR can be
abbreviated \fBfi\fR).  The format of the fill
command if you wish to keep the default line length of 72 is:
.(b
<CMD> \fBfill\fR area\fR <RETURN>
.)b
The format of the file command if you wish to change the line width is:
.(b
<CMD> \fBfill width\fR= \fInn  area\fR <RETURN>
.)b
The area is defined by a number followed by a \fBp\fR (standing for number of
paragraphs, i.e., \fB3p\fR) or \fBl\fR (standing for number of lines, i.e.,
\fB20l\fR).

If the \fBwidth=\fR\fIn\fR option (replace \fIn\fR with the number of
characters wide)
is specified, that width stays in
effect until another width is specified.  (See also \fIJUSTIFY\fR
and \fIWIDTH\fR.)
.sp
.h1 "FUNCTION KEYS"
A function key is a key that performs a function when pressed,
for example, <CLOSE>.
Many keys have their functions marked on the top of the
key.  Those keys with functions marked on the front face
require an additional key be pressed, usually the <CTRL> key.
Some functions require that the <CMD> key be pressed first
and then the function key.  For the use of any
particular function key, see the name of that key.
.sp
.h1 "GOTO"
The cursor can be moved to a specific line number in the file
by pressing <CMD> \fBgoto \fR\fIn\fR <RETURN> (\fBgoto\fR
may be abbreviated \fBgo\fR or \fBg\fR)
and where \fIn\fR is the line number.  The \fBgoto\fR command has
a default line number of 1, which allows the user to go to the
beginning of the file.  The goto command also allows the use
of \fBb\fR to go to the beginning of the file, and \fBe\fR to go to the
end of the file.  Consequently, \fBg\fR, \fBg b\fR and \fBg 1\fR all go to line
one.  And \fBg e\fR goes to the last line in the file.

There is another mechanism for going to the front and
the end of the file.  Pressing <CMD> <-PAGE>
moves the cursor to line 1.  Pressing
<CMD> <+PAGE> moves the
cursor to the last line of the file.
.sp
.h1 "<HOME>"
Pressing <HOME> moves the cursor to the upper left corner
of the current window.  Pressing <CMD> <HOME>
moves the cursor to the lower left corner.
.sp
.h1 "<INSERT>"
This key is used to put the Editor into and out of the Insert
Mode.  When the Editor is in Insert Mode, the word "INSERT"
is printed below the window as a reminder.  A number of
functions behave differently in Insert Mode.  Most
importantly, text typed while in Insert Mode
is inserted into the line moving existing text to the right
rather than replacing existing
text.  Insert Mode is turned off by pressing
<INSERT> again.  (See also \fI,<BSP>, COMMAND MODE,>\fR and \fIEDIT MODE.)
.sp
.h1 "INTERACTIVE REPLACE"
See \fIREPLACE\fR.
.sp
.h1 "JOIN"
The join command joins two lines together.  The line the cursor is
located on is lengthened by appending the line below it.
If the next line(s) is blank, it will go to the next line of text and add it.
The joined line is added after the end of text on the line where the cursor
is.  To use the command, the user types <CMD> \fBjoin\fR <RETURN> (where
\fBjoin\fR
may be abbreviated \fBjo\fR).  (See also \fISPLIT\fR.)

You may also mark two points you want joined with <MARK>.  All text deleted
by the operation is saved in the close buffer.
.sp
.h1 "JUSTIFY"
The justify command moves words from line to line so that
the last word in each line ends exactly at the right margin.
(The right margin is the "width" specified in the
last fill, justify, or center command, or the default width of 75.)
The justify command adds blanks between the words to spread
the words out evenly on a line.

A paragraph is justified by moving the cursor to the first line
of the paragraph and
pressing <CMD> \fBjustify\fR
<RETURN> (where \fBjustify\fR may be abbreviated \fBju\fR).  The full format
of the justify command if you wish to keep the default line width of 75 is:
.(b
<CMD> \fBjustify\fR \fIn area\fR <RETURN>
.)b
If you wish to change the line width, the command is:
.(b
<CMD> \fBjustify\fR \fBwidth=\fR\fIn area\fR <RETURN>
.)b
If the \fBwidth=\fR\fIn\fR option is specified, that width stays in
effect until another width is specified in another fill, justify, or
center command. (See also \fIAREA\fR, \fIFILL\fR, and \fIWIDTH\fR.)

To restore justified text
to its original unjustified state after issuing a justify command, type <CMD>
\fBinsert adjust\fR <RETURN.  You can only recover text from the last
time the justify command was used.
.sp
.h1 "KEYSTROKE FILE"
The keystroke file is named .ek1 for a user who owns
the directory and is the only user working in it.  The
keystroke file is named .ek1.\fIusername\fR
for a user who is working in someone else's
directory.  The keystroke file is used to update the file
being edited at the end of the session when the user exits
normally.
After exiting normally, the keystroke file is deleted.

If the user exits with the abort option (\fBexit abort\fR) or if
the Editor crashes, the keystroke file is retained and the
file being edited is left unchanged.

An aborted session (\fBexit abort\fR) can be replayed if
the user returns to the same directory and types \fBe\fR.
The Editor then presents the user with four options, one of which
is a visible replay.  The user can initiate the replay, watch
it occur, and interrupt it before it ends by pressing <INT>.

After an Editor crash, the user can return to the same directory
and type \fBe\fR, and the Editor will prompt the user
with four recovery options.
(See also \fIEXIT, RECOVERY, REPLAY,\fR and \fISTATE FILE\fR.)
.sp
.h1 "<LEFT>"
This key is pressed to
move the window 16 characters to the left.  The window cannot
move to the left of column 1 of the text.
Pressing <CMD> <LEFT>
moves the window to the left
so that it displays columns 1-78 of the file.
(See also \fI<ARROW KEYS>,\fR and \fI<RIGHT>\fR.)
.sp
.h1 "<LEFT ARROW>"
See \fI<ARROW KEYS>\fR.
.sp
.h1 "<+LINE>"
This key moves the top fourth of what was on the window out of sight
and redraws the screen.  The cursor stays at the same line
number, or if that line number is moved off the screen, the
cursor stays at the top of the window.
.sp
.h1 "<-LINE>"
This key moves the bottom fourth of what was on the window out of sight,
brings into sight an equal number of lines at the top of the window,
and redraws the screen.  The cursor stays at the same
line number, or if that line number is moved off the screen,
the cursor stays at the bottom of the window.  Pressing
<-LINE> has no effect if the top of the window is at line
number 1.
.sp
.h1 "LINE MANIPULATION"
For breaking lines apart, see \fISPLIT\fR; combining lines,
see \fIJOIN\fR; deleting lines, see \fI<CLOSE>\fR and \fI<ERASE>\fR;
adding lines,
see \fI<CLOSE>\fR and \fI<PICK>\fR; moving lines, see \fI<CLOSE>\fR.
.sp
.h1 "LONG LINES"
The window normally shows columns 1-78.  When the user
attempts to type beyond column 78, the Editor prints an error
message and will not print characters typed at that point.
The window can be moved to the right 16 characters by pressing
<RIGHT>.  Another 16 characters can then be added to the line.

The window can be moved more than 16 characters to the right by
moving the cursor to the column that will become column 1 of the
new window, and then pressing <CMD> <RIGHT>.  The window will then
move to the right so that the cursor is at the left edge of the window.

The window can be moved from a position on the right back to
the leftmost position (columns 1-78) by pressing <CMD> <LEFT>.

When the cursor is at the right most edge of the window, and the <RIGHT ARROW>
is pressed, the window will move two spaces to the right.


Lines longer than 132 characters cannot be printed,
so text lines should be limited to 132 characters.  Lines of 132 characters
may only be printed sideways.
(See also \fI<ARROW KEYS> <LEFT>, \fRand \fI<RIGHT>.\fR)
.sp
.h1 "MARGIN CHARACTERS"
The character "-" is used to mark the top and
bottom edges of the window.  The character ":" is used to
mark the right and left edges of the window when all of the
text is within the window.

The character "<" is used to mark the left edge of the
window when the window has been moved right.  The character
">" is used to mark the right edge of the window when
text extends beyond the right edge of the
window.

Bright blocks are sometimes used to target the column and line
where the cursor is located.

The character ";" is used to mark lines beyond the last line of text in
a file.

The character "." (period) is used to outline windows other
than the current window.
.sp
.h1 "MARGINS"
The Editor sounds a warning beep when the user types a
character into column 67 of the screen regardless of where the actual right
margin has been set.  The actual right margin for a fill,
justify, or center command is determined by the last "width="
issued in one of these commands or by the default width of 75.

If a paragraph has already
been typed beginning in column 1 and an additional indention
is desired, that indention can be achieved by marking
the indention (as a rectangle) and then pressing <OPEN>.

For documents and reports, text is normally typed beginning in column 1,
interspersed with formatting macros, and then the format package processes
the file and creates the requested indentions.
(See also \fICENTER, FILL, JUSTIFY, <MARK>, \fRand\fI <OPEN>\fR.)
.sp
.h1 "<MARK>"
This key is used to define an area and is labeled <MARK>.
This key allows the user to mark lines and
rectangles and then issue a command that affects only the marked area
using a variety
of commands and key functions.  To mark several whole lines
the user moves the cursor to the first line to
be marked and presses <MARK>.  The user then moves
the cursor to the last line to be marked (the number of lines
marked is indicated in the mark message below the window).  At this
point the user issues a command or presses a function key.  For example,
the user may press <PICK> to place the marked
lines in the pick buffer, or press <CLOSE> to place the
lines in the close buffer, or press <OPEN> to open
a number of blank lines in the marked area, or type in a variety
of commands such as fill, justify, replace or erase.

The mark function is normally terminated when the <PICK>, <CLOSE>, <ERASE>,
or <OPEN> key is pressed, or when the user types in
a command.

An incomplete or unwanted mark function can be terminated
by pressing <CMD> <MARK>.
(See also, \fICENTER, <CLOSE>, <ERASE>, FILL, JUSTIFY, <PICK>, <OPEN>.)
.sp
.h1 "MOVING LINES"
Moving lines is done by closing the lines and then
placing them elsewhere.  (See \fI<CLOSE>\fR.)
.sp
.h1 "MOVING TEXT BETWEEN FILES"
Sections of text from one file can be
moved or copied to another file by editing both files, copying
the text with pick or moving it with close,
alternating files, and then placing the text in the second file.

The user initiates the process by
typing \fBe\fR \fIfilename\fR <RETURN> to begin editing a file from which
sections of text will be copied or removed.  Once in that
file, the cursor is moved to the first line of text to be moved or
copied and <MARK> is pressed to begin marking the area.
The cursor is then moved to the last line
of text to be moved or copied, and <PICK> or <CLOSE> is pressed
depending on whether the text is to be copied or moved.

The second file is now
brought up as the alternate file
by pressing <CMD> \fBe \fR\fIsecondfilename\fR <RETURN>.
The cursor is moved to
the location in this second file where the text is to be placed,
and then <CMD> <CLOSE> or <CMD> <PICK> is pressed depending on
whether the text was initially closed or picked.

The second file can now be edited normally.  Upon normal exit,
both files are updated to reflect the editing performed.
(See also \fIALTERNATE FILE, <CLOSE>, <MARK>, MULTIPLE WINDOWS,\fR, and
\fI<PICK>\fR.)
.sp
.h1 "MOVING THE WINDOW"
See \fI<ARROW KEYS>, <LEFT>, <+LINE>, <-LINE>, <+PAGE>, <-PAGE>,\fR and
\fI<RIGHT>\fR.
.sp
.h1 "NAME"
The file being edited can be renamed, while in the Editor, by
pressing <CMD> \fBname\fR \fInewfilename\fR (where \fBname\fR
can be abbreviated
\fBn\fR).
The naming takes effect upon successful exit from the Editor.
To negate the renaming, the editing session must be aborted with \fBexit abort\fR.
(See also \fIFILENAME\fR and \fIRENAMING FILES\fR.)
.sp
.h1 "OPEN"
The open command may be used instead of <OPEN> to open space.
To open an area, the user types <CMD> \fBopen\fR \fIn\fR <RETURN>
(where \fBopen\fR may be abbreviated \fBo\fR).  The default area is
one line.
(See also \fI<OPEN>\fR.)
.sp
.h1 "<OPEN>"
This key inserts blank space into the file.  If <OPEN> is
pressed by itself, it inserts a blank line at the line
where the cursor is.  In doing this it moves all of the
remaining lines in the file down one line.  Several lines
can be opened by pressing, <CMD> \fIn\fR <OPEN>,
where \fIn\fR is the number of blank lines
to insert in the file.

The open key will also operate on an area that has been marked
with the <MARK> key.  For example, to indent several lines of
text, the cursor is moved to the first line of text and the
<MARK> key is pressed to begin the mark process.
The cursor is then moved to the right the number of columns
of indention required and then to the bottom line of text.
This marked area is shown below the window as "MARK nxn", where n
refers to the number of lines and columns.
The <OPEN> key is
pressed at this point and the text is indented.  Note that the
dimensions of the marked area are not saved by the Editor, so
a subsequent press of a <CLOSE> key does not return the area
to its former state. (See also \fI<CLOSE>, \fRand\fI <MARK>\fR.)
.sp
.h1 "<+PAGE>"
This key moves the window toward the end of the file for one
window full of lines.  The window can be moved more than
one page by pressing <CMD>\fR \fIn\fR <+PAGE>,
where \fIn\fR is the number of pages to move toward
the end of the file.

The key sequence <CMD> <+PAGE>
moves the cursor to the last line of the file and redraws the
window if necessary. (See also <-PAGE>.)
.sp
.h1 "<-PAGE>"
This key moves the window toward the front of the file
by one window full of lines.  The window can be moved more
than one page by pressing <CMD> \fIn\fR <-PAGE>,
where \fIn\fR is the number of pages to
move toward the front of the file.

The key sequence <CMD> <-PAGE>,
moves the cursor to line 1 of the file and redraws the window
if necessary. (See also \fI<+PAGE>\fR.)
.sp
.h1 "PAGINATION"
Pagination of large documents is normally performed using a
formatting package.  Pagination can be manually inserted by
inserting page eject (formfeed) characters at the beginning of each page of
text (assuming the formfeeds are closer together than the page size
specified in the Unix print command, usually 60 lines).  A formfeed is
inserted in the text in column 1 by pressing <CNTL CHAR> |SHIFT+L|.
The first keystroke combination produces a bright block and the
second keystroke combination inserts a capital "L".
.sp
.h1 "PARAGRAPHS"
Many Editor commands deal with paragraphs.  For example,
the fill command, if no area is specified, fills one
paragraph.  In most commands, "paragraph" is abbreviated \fBp\fR,
for example, \fBfill \fR\fI6\fBp\fR.  To the Editor a paragraph is a line or series of
lines that ends with a blank line or the end of the file.
That is, paragraphs are separated from one another by a blank line.

Paragraphs are most easily dealt with by use of formatting
macros.
(See also \fIFILL, JUSTIFY,\fR and \fI<OPEN>\fR.)
.sp
.h1 "PICK"
The pick command may be used instead of the pick key to pick
text and place it in the pick buffer.  The format of the command
is <CMD> \fBpick\fR \fIarea\fR <RETURN> (where \fBpick\fR may be abbreviated
\fBpi\fR). If \fIarea\fR is not specified, the default area is one line.

The information copied with the pick command or key may be placed
back in the file by entering the command
<CMD> \fB-pick\fR <RETURN> (where \fB-pick\fR may be abbreviated \fB-p\fR).
(See also \fI<PICK>\fR.)
.sp
.h1 "-PICK"
This command may be used to copy text from the pick buffer into
the file.  The format of the command is <CMD> \fB-pick\fR <RETURN>
(where \%\fB-pick\fR may be abbreviated \fB-pi\fR).

Text may also be copied from the pick buffer into the file
by pressing <CMD> <PICK>.  (See also \fI<PICK>\fR.)
.sp
.h1 "<PICK>"
The pick key copies characters, lines, and areas into a
buffer from which copies may be placed anywhere in the file.
The picked material remains in the buffer until <PICK> is
pressed again, or until the user exits the file.  One line
may be copied by moving the cursor to that line and
pressing <PICK>.  Several lines may be copied by pressing <CMD>
\fIn\fR <PICK>, where \fIn\fR is
the number of consecutive lines to be copied.  These lines are
copied beginning with the line where the cursor is.

A copy of the picked lines can be inserted into the file by moving
the cursor to where the lines are to be placed and pressing
<CMD> <PICK>.  The picked lines
are inserted starting on the line where the cursor is.
Copies of the picked lines may be inserted in an unlimited number of
places in the file.

The pick function also works with marked lines and marked
rectangles.  To mark a rectangular area and then place a copy
of it into the pick buffer, the following keystrokes are
necessary:  move the cursor to the upper left hand corner of
the rectangular area and press <MARK>; move the cursor to the
lower right hand corner of the rectangular area and press
<PICK>.  The text will be copied into the pick buffer, and the
cursor will return to where it was when <MARK> was pressed.

Text copied form the pick buffer is placed in the change file. (See also
\fICHANGE FILE, <CLOSE>, MOVING TEXT BETWEEN FILES\fR, and PICK\fR.)
.sp
.h1 "PICK BUFFER"
The pick buffer is a special area in the Editor that contains text
that is copied with the <PICK> key.  Picked text remains in
this buffer until the <PICK> key is pressed again when it is replaced by
new text or until the file is exited.  (See
also \fIPICK\fR and \fI<PICK>\fR.)
.sp
.h1 "PLACING TEXT"
Text that has been removed with the <CLOSE> key may
be copied back into the file in the same place or elsewhere
by pressing <CMD> <CLOSE>.
Text that has been picked with the <PICK> key may be
copied back into the file by pressing <CMD> <PICK>.

Text can also be placed in the file by the use of
commands.  Text in the pick buffer can be copied to the
file by pressing <CMD> \fB-pick\fR <RETURN> (where \fB-pick\fR may
be abbreviated \fB-pi\fR).  Text in the close buffer may be copied
to the file by pressing <CMD> \fB-close\fR <RETURN> (where \fB-close\fR
may be abbreviated \fB-c\fR).
(See also \fI<CLOSE>, PICK\fR and \fI<PICK>\fR.)
.sp
.h1 "QUITTING"
See \fIexit\fR.
.sp
.h1 "RECOVERY"
There are several situations from which a user would
want to recover.  First, there is the situation in which the
Editor, E, fails and prints a "crash" message.  Recovery from
this situation is performed by entering the same directory and
typing \fBe\fR.  The Editor will prompt the user with four options,
one of which is a non-visible, automatic recovery (option 1).

Another type of recovery involves material inadvertently
closed out via the <CLOSE> key.  Frequently a user wants to
recover text that was inadvertently closed.  That text may
be found in the change file.  The change file may be edited as
an alternate file, the material picked from it, and then
placed in the original file. (See \fICHANGE FILE\fR and \fIMOVING TEXT
BETWEEN FILES\fR.)

When a user makes a serious editing mistake and ruins a file,
he can negate the error and the
editing session by typing \fBexit abort\fR.
He can then recover the editing session by typing \fBe\fR.  The Editor
will prompt
him with four options, one of which is a visible replay (option 2).  The
user can initiate the replay, watch it occur, and just before the
serious mistake is replicated, interrupt the replay by pressing
<INT>.  The replay is
performed quickly, and some skill is required to interrupt it
at the desired point.

The Editor prints the following prompt when it is entered again
in the same directory after a crash or an aborted session:
.(b
The last time you used the Editor in this directory, you crashed or
aborted.  You have these choices:
 1.  E will silently recover the last session and then update the screen;
     exit before you continue editing.
       (Normally, select this option.)
 2.  E will replay the last session on the screen; exit before you
     continue editing.
       (Select this option if E continues to crash in response to
       Option 1; press the interrupt key just before E completes the
       replay.  The interrupt key is <INT> for Ambassadors, and |CTRL+C|
       for the other Ann Arbor terminals.
 3.  E will give you the version you had BEFORE you began the last session.
       (Select this option only if you do NOT wish to recover the last
       session's work.)
 4.  E will not do anything.
      (Select this option if you do not know what to do; call X678 for
      assistance.)
 Type the number of the option you want then hit <RETURN>:
.)b
Choices 1 and 2 are normally requested; choices 3 and 4
are presented to allow for all possible alternatives (they do not recover).

To circumvent this message after an aborted session, call the
Editor by typing \fBe -norecover\fR, or you may choose option 3.  This will completely eliminate
an aborted session and destroy any chance for a recovery
of that session.
.sp
.h1 "RECTANGULAR AREAS"
Rectangular areas are defined by using the
mark function.  (See \fI<MARK>\fR.)
.sp
.h1 "REDRAW"
To redraw the screen and eliminate extraneous characters
(such as system messages, noise characters, and garbage characters), the user presses <CMD>
\fBredraw\fR <RETURN> (where \fBredraw\fR may be abbreviated \fBred\fR).
.sp
.h1 "RENAMING FILES"
A file can be renamed using the Unix command \fBmv\fR
in response to the Unix "%" prompt.

The file being edited can be renamed while in the Editor by pressing, <CMD>
\fBname\fR \fInewfilename\fR <RETURN> (where \fBname\fR can be abbreviated
\fBn\fR).  The renaming takes place upon normal exit from the Editor.  To
negate the renaming, the session must be aborted by typing \fBexit
abort\fR.
.sp
.h1 "REPLACE"
The replace command is
used to replace characters or words with
other characters or words.
The simplest form of the command is \fBreplace\fR (where replace can be
abbreviated \fBrep\fR),
which directs the Editor to search for occurrences of \fItexta\fR
beginning where the cursor is and proceeding toward
the end of the file.
.(b
<CMD> \fBreplace\fR \fI/texta/textb/\fR <RETURN>
<CMD> \fB-replace\fR \fI/texta/textb/\fR <RETURN>
.)b
This would replace every occurrence of \fItexta\fR with \fItextb\fR,
starting where the cursor is and proceeding to the end of the
file.
If the command is prefaced with a minus sign, \fB-replace\fR or \fB-rep\fR,
the Editor searches for occurrences of \fItexta\fR beginning where the
cursor is and proceeding toward the beginning of the file.

Two options are \fBshow\fR and \fBinteractive\fR.
The \fBshow\fR option allows the user to see the replacements as they
occur.  The \fBinteractive\fR option allows the user to not only see
the replacements, but also to control whether each
replacement will occur.  Since \fBinteractive\fR includes \fBshow\fR,
only one of these options can be typed with the
command at any one time.

The \fBshow\fR
option displays the replacements on the screen as they occur.
That is, each occurrence of \fItexta\fR is located, the screen
is redrawn to show that occurrence, and then the replacement
is performed.
The command
can be interrupted at any time by pressing
<INT>.

The \fBinteractive\fR option, (which can be abbreviated \fBint\fR) allows
the user to replace only selected occurrences of \fItexta\fR with
\fItextb\fR.  When the first occurrence of \fItexta\fR is found, the cursor
is moved to it.  At this point, pressing <REPLC> triggers replacement of
that occurrence of \fItexta\fR with \fItextb\fR.  The user then presses
<+SCH> to search for the next occurrence of \fItexta\fR.
If the user does not want an occurrence
of \fItexta\fR to be replaced, the user presses <+SCH>, and the
Editor skips that replacement and proceeds to the next occurrence of
\fItexta\fR.
In this fashion the user can replace just those occurrences
of \fItexta\fR that he wants to.

The text searched for and the replacement text can be separated
in the command by a
variety of characters including: /, *, ', ", $, +.  These characters should
only be used if they are not part of your text to be replaced.

Replacements may be limited to a specified number of paragraphs.

The following examples illustrate variations of the command:
.(b
<CMD> \fBrep \fR\fI/Smythe/Smith/\fR <RETURN>          Simple replacement
					   to end of file.

<CMD> \fBrep \fR\fI4p /Smythe/Smith/\fR <RETURN>       Simple replacement
					   for 4 paragraphs.

<CMD> \fBrep \fR\fI4  /Smythe/Smith/\fR <RETURN>       Simple replacement
					   for 4 lines.

<CMD> \fBrep \fR\fI4p int */____/*/..../*\fR <RETURN>  Replace "/____/" with
					   "/..../" in 4 paragraphs
					   interactively.

<MARK> <cursor movements> <CMD> \fBrep int\fR \fI/AA/BB/\fR <RETURN>
.)b
This last example illustrates that a marked area can be used to
limit the area where replacement takes effect.  In this example, \fIAA\fR
is to be replaced by \fIBB\fR in the interactive mode in the area marked by
the cursor movements.
(See also \fI<MARK>, <+SCH>,\fRand\fI <-SCH>,\fR.)
.sp
.h1 "REPLAYING A SESSION"
A session may be replayed if the session ended in a
crash, or if the session was ended by the user typing
\fBexit abort\fR.  In all of these cases the keystroke file, normally
named ".ek1", is preserved and can be used by the system for a replay.

After a crash the user returns to the same directory and
types \fBe\fR, and the Editor prompts him with
four options, one of which is a nonvisible automatic replay (option 1).

In the event of an aborted session (\fBexit abort\fR), the user also returns
to the same directory and types \fBe\fR, and the Editor prompts him
with four options, one of which is a visible replay (option 2).
The user initiates the replay, watches it occur, and then interrupts
it at a desired point by pressing <INT>.
(See also \fIKEYSTROKE FILE\fR and \fIRECOVERY.)
.sp
.h1 "<RETURN>"
Within the window, this key is pressed to move the cursor to column
1 of the next line.

On the command line this key is pressed at the end of a command to signal
the Editor that a command had been entered, e.g., an "execute" key.
.sp
.h1 "<RIGHT>"
This key is pressed to move the
window 16 characters to the right.
Pressing <CMD> <RIGHT> moves the
window to the right so that the cursor is displayed in column 1
of the new window.
(See also \fI<ARROW KEYS>\fR and \fI<LEFT>\fR.)
.sp
.h1 "<RIGHT ARROW>"
See \fI<ARROW KEYS>\fR.
.sp
.h1 "RUN"
A UNIX command can be executed in the Editor by pressing:
.(b
<CMD> \fBrun\fR \fIarea\fR \fIcommand\fR <RETURN>
.)b

For example, to run the Unix command "ls" and have
the output included in the file being edited, press
<CMD> \fBrun\fR \fIls\fR <RETURN>.

Note that the output from a command
can vary depending on when it is run, and consequently
a replay of the editing session that includes a command
may produce disastrous results.

For knowledgeable Unix users only: \fBarea\fR is passed to the standard
input of the command and is replaced by the output of the command.
.sp
.h1 "SAVE"
A copy of the file being edited can be saved with the
current changes by pressing, <CMD> \fBsave\fR \fInewfilename\fR <RETURN>
(where \fBsave\fR may be abbreviated \fBsa\fR).  The file is saved
immediately, and does not wait for you to exit from the Editor.
The \fInewfilename\fR must be specified and cannot be the name of the
file being edited.  This command is a convenient way of backing up
a modified file before attempting some new, dramatic editing.
.sp
.h1 "SAVING FILES"
A file is saved with the edited changes when the
user exits normally with \fBexit\fR.  A file can also be
saved with the edited changes by means of the save
command.  (See also \fICREATING FILES, EXIT, \fR and \fISAVE\fR.)
.sp
.h1 "<+SCH>"
This key is used to search for characters, or words.
The search begins where
the cursor is and proceeds toward the end of the file.  To search specific
words or characters, the user presses <CMD> \fIwords\fR <+SCH>.
If the Editor finds an
occurrence of \fIwords\fR, the Editor moves the cursor to that
text and redraws the window if necessary.  To continue
searching the user presses <+SCH> again.  The text string searched for is
placed in a search buffer, and consequently is available to be
searched again by pressing <+SCH> or <-SCH>.

There is another method of placing text in the search
buffer.  This method is limited to text that does not contain
blanks.  To use this method, the user positions the cursor at
the first character of the text and presses <CMD>
<+SCH>.  The Editor then copies
the characters up to but not including the next
blank space (one word only) into the search buffer.  The search for the
text then proceeds normally. (See also \fIREPLACE\fR and \fI<-SCH>\fR.)
.sp
.h1 "<-SCH>"
This key is used to search for characters or words.
The search begins where
the cursor is and proceeds toward the beginning of the file.  The method is the
same as in <+SCH>. (See also \fIREPLACE\fR and \fI<+SCH>\fR.)
.sp
.h1 "SCRATCH FILE"
Occasionally the Editor finds itself with no
file to work in when the user expects to be working
in a file.  The Editor solves this dilemma
by creating a file named "scratch".
If the user does not want to keep "scratch", he
should \fBexit\fR.
.sp
.h1 "SEARCHING"
See \fI<+SCH>\fR and \fI<-SCH>\fR.
.sp
.h1 "SETTING TABS"
See \fItab\fR and \fItabs\fR.
.sp
.h1 "SPLIT"
This command splits one line into two lines at the point where
the cursor is.  The righthand side of the line, including the character
at the cursor, is inserted as a new line on the line below, and then
the window is redrawn.  To use this command, a user types
<CMD> \fBsplit\fR <RETURN> (where \fBsplit\fR may be abbreviated \fBsp\fR).
(See also \fIJOIN\fR.)
.sp
.h1 "<S/R TAB>"
This key sets and unsets tabs.  It is labeled <[> on some terminals.  To
set a tab using this key, the user moves the cursor to the column where a
tab is desired and presses <S/R TAB>.  To clear a tab using this key, the
user moves the cursor to position where a tab is to be removed and presses
<CMD> <S/R TAB>. (See also \fITAB, -TAB, TABS, -TABS, <+TAB>\fR, and
\fI<-TABS>\fR.
.sp
.h1 "STATE FILE"
The state file contains information about the last file
edited in the directory, including the filename, the place
in the file where the cursor was when the user exited, the
line length established in the last fill, justify, or center
command, the state of Insert Mode, the tabs, and the last
search string.  The name of this file, assuming the user owns
the directory and is the only user working in the directory,
is ".es1". (See also \fICHANGE FILE, KEYSTROKE FILE,\fR, and
\fIRECOVERY\fR.)
.sp
.h1 "TAB"
To set a tab using this command,
a user types <CMD> \fBtab\fR \fIcolumn\fR <RETURN>,
where \fIcolumn\fR
is an optionally specified column number or several column numbers
separated by blanks.  If \fIcolumn\fR
is not specified, the tab is set where the cursor is.

Note that this command does not clear tabs; it
sets the tabs where indicated.
(See also \fI-TAB, TABS, -TABS, <+TAB>, <S/R TAB>,\fR and \fI<-TABS>\fR.
.sp
.h1 "-TAB"
To clear a tab using this command,
a user types <CMD> \fB-tab\fR \fIcolumn\fR <RETURN>,
where \fIcolumn\fR
is an optionally specified column number or several column numbers
separated by blanks.  If \fIcolumn\fR
is not specified, the tab is cleared where the cursor is).
(See also \fITAB, TABS, -TABS, <+TAB>, <S/R TAB>\fR, and \fI<-TABS>\fR.
.sp
.h1 "<+TAB> or <TAB>"
This key moves the cursor to the next tab going toward the
right margin.  Default tabs are set every 8 columns
beginning in column 1 and ending in column 73.  When the
cursor is at the rightmost tab or beyond, pressing <+TAB> or <TAB> has no
effect.
(See also \fI-TAB, TABS, -TABS, <S/R TAB>\fR, and \fI<-TABS>\fR.)
.sp
.h1 "<-TAB> or |SHIFT+TAB|"
This key moves the cursor to the next tab going toward the
left margin.  The default tabs are set every 8 columns
beginning in column 1 and ending in column 73.  When the
cursor is at or before the leftmost tab, pressing <-TAB> or |SHIFT+TAB|
has no effect.
(See also \fI-TAB, TABS, -TABS, <S/R TAB>\fR, and \fI<-TABS>\fR.
.sp
.h1 "TABFILE"
This command sets tabs according to a file containing a list
of column numbers separated by blanks.  To set tabs using this
command, the user presses <CMD> \fBtabfile \fR\fIfilename\fR <RETURN>,
where filename
is the name of a file containing the column numbers where the
tabs are to be placed.  The file with the tabs must be created and saved
before editing a file where the tabfile is to be used.
Note that this command does not erase
any existing tabs; it adds tabs as specified.
(See also \fI-TAB, TABS, -TABS, <S/R TAB>, <+TABS>\fR and \fI<-TABS>\fR.)
.sp
.h1 "TABS, THE TOPIC"
The Editor sets default tabs in column 1 and every
8th column after that to column 73.  Additional tabs can be
set using \fBtabfile\fR, \fBtab\fR, and
.br
<S/R TAB>.  Tabs can be
removed using \fB-tab\fR and <CMD> <S/R TAB>.
(See also \fI-TAB, TABS, -TABS, <S/R TAB>, <+TABS>\fR and \fI<-TABS>\fR.)
.sp
.h1 "TABS"
This command sets tabs every nth column, for example, tabs sets every 5
columns.  To
set tabs in this fashion, the user presses <CMD> \fBtabs\fR\fI n\fR
<RETURN>, where
n is every nth column beginning with column 1.
(See also \fI-TAB, -TABS, <S/R TAB>, <+TABS>\fR and \fI<-TABS>\fR.)
.sp
.h1 "-TABS"
This command clears all tabs.  To clear all tabs, the user presses
<CMD> \fB-tabs\fR <RETURN>.
This command can also be used to clear tabs in every
nth column by pressing, <CMD> \fB-tabs\fR \fIn\fR <RETURN>,
where n is the distance between
the columns.  Tabs can be cleared in every nth column
in an area if the area is first marked and then the
-tabs command issued.  (See also \fITAB, TABS, <+TAB>, <-TAB>,\fR
and \fI<S/R TAB>\fR.)
.sp
.h1 "TRACK"
Track causes the current file and the alternate file to track each other.
That is, if you move the window in any direction, the alternate file
window is moved the same amount.  This is useful for comparing two files.
If you move the window in any direction, the cursor for the alternate file
will be in the same position relative to the window as the current file's
cursor.  In no case will the alternate file's window be moved backwards
past the beginning of the file or to the left beyond the left edge of the
file.  A "TRACK" indicator will appear on the info line if tracking is set
in the window you are in.  Use "-track" to turn off tracking.
(See \fIALTERNATE FILE\fR and \fI-TRACK\fR.)
.sp
.h1 "-TRACK"
Track causes the current file and the alternate file to track each other.
-Track turns off the tracking in the current window.
(See \fIALTERNATE FILE\fR and \fITRACK\fR.)
.sp
.h1 "UNDERLINING"
Printing text on the terminal screen with underline
characters is not possible on Ann Arbor terminals.  Underlining
is possible on text printed on hardcopy terminals and
on text printed on printers in the Computation Center.
Underlining is accomplished most easily by
use of the format package.  Underlining can be accomplished
on a character-by-character basis by adding a control character, a backspace
character, and an underline character to the text.

To underline one character manually, the underline character must be
typed, and then a control character equal to a backspace
character must be entered in the text, and then the
character itself must be typed.  The keystrokes required to underline
the letter "t" are as follows:
.(b
<_> <CNTL CHAR> |SHIFT+H| t
.)b
The first keystroke generates the underline character; the second keystroke
generates a small, bright block on the screen.
The next
keystroke, generates the code for a control
backspace character that is to be entered into the text
(not a backspace character used while editing); and finally
the last keystroke generates the letter \fIt\fR.
.sp
.h1 "UNMARK"
To negate marking, the user presses <CMD> <MARK>.
(Also see \fI<MARK>\fR.)
.sp
.h1 "UP ARROW"
(See \fI<ARROW KEYS>\fR.)
.sp
.h1 "USING A FILE"
A file is edited by typing \fBe \fR\fIfilename\fR.  If the
file to be edited is the same file worked on in the last
editing session, then the user can return to the same
file in the same place by typing \fBe\fR.  While
editing one file, another file can be edited as an alternate file.  (See also
\fIALTERNATE FILE\fR and \fIMOVING TEXT BETWEEN FILES\fR.)
.sp
.h1 "WIDE FILES"
Files with wide lines can be viewed by using <RIGHT>
and <LEFT> to shift the window.
(See also \fILONG LINES\fR.)
.sp
.h1 "WIDTH"
The fill, justify, and center commands allow the user to specify a width.
The \fBwidth=\fR\fIn\fR specified as part of the command may be abbreviated
\fBw=\fR\fIn\fR.  This width remains in effect until another fill, justify, or
center command is entered with a different width specification, or until
you exit from the file.  This width is maintained as part of the
information kept in the state file.

When a file is created, the default width is 75.
.sp
.h1 "WINDOW"
The Editor uses the window concept to display a file.  The
terminal screen is viewed as a window that opens on part of the
file.  The window can be moved forward and backward through
the file (and right and left) to view different portions of
the file.  When the user presses keys that require the cursor
to be moved out of the window, then the window is moved so
that the cursor remains in the window. (See also \fICREATING
\fIWINDOWS, DELETING WINDOWS, \fRand WINDOWS\fR.)
.sp
.h1 "WINDOWS"
Multiple windows are useful for moving text between files,
comparing files, and merging files.  A new window is created
by positioning the cursor on either the left or top edge of the window
but not in the top left hand corner.  Press <CMD> \fBwindow \fR
\fInewfilename\fR <RETURN> (where window may be abbreviated \fBw\fR).
The file \fInewfilename\fR becomes
the current file, and the new window becomes the current
window.  If a filename is not specified, <CMD> \fBwindow\fR <RETURN>, the current file
also becomes the current file in the new window.

The windows are numbered in the order in which they were
created.  To move the Editor from window to window, the user
presses <CHG WIN>.  To move to a particular
window, the user types <CMD> \fIn\fR <CHG WIN>,
where \fIn\fR is the number of the window.

To remove the last window created, the user types
<CMD> \fB-window\fR <RETURN> (where \fB-window\fR
may be abbreviated \fB-w\fR).
(See also \fIALTERNATE FILE\fR.)
.sp
.h1 "#o"
This is the name of a pseudo file created by the Editor
to access the text that has been
closed using <CLOSE> or the close command, or deleted using the erase
command.  It also gives access to text that has been filled or justified.
(See
\fICHANGE FILE\fR.)
.sp
.h1 "#p"
This is the name of a pseudo file created by the Editor
to access text in the change
file that has been picked.  (See
\fICHANGE FILE\fR.)
.mh "THE STANDARD KEYBOARD"
.pp
There is now a "standard" E keyboard, that is designed to be usable
on all video display terminals.  Either say "e \-keyboard=standard" or
"setenv EKBD standard" before running E to select this keyboard.
This is also the keyboard that E will use if there is no specific knowledge
of your type of terminal compiled into the editor.
.pp
This keyboard layout is designed to be used on terminals with no
function keys. "^H" means control\-H, and "^X\-^U" means control\-X
followed by control\-U.  The ALT entry gives you a choice of "^/"
or "^_" because one or the other or both will not work on some
terminals. ("_" is correct ASCII.)
.pp
Note that +WORD and \-WORD are not implemented yet.
.bp
.tc no
.so e.stdkey.out
.pc
