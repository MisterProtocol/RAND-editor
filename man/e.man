.if t .po 1i
.TH E 1 RAND
.SH NAME
e \- the RAND editor, E
.SH SYNOPSIS
.B e
[ options ] [ mainfile [ altfile ] ]
.SH DESCRIPTION
The Rand editor
.I E
is a full screen editor which treats a text file as a
two-dimensional surface with text on it.  Among its more
unusual features are manipulating rectangular areas of text,
editing several files at once, and displaying text in one or
more windows.  While it is not as powerful as
.I Emacs,
or as widely used as
.I Vi,
most people at Rand preferred its easy to learn commands and
used it to edit both programs and text, during the period ranging
from roughly 1973 to 1995.
.I E
is a complete rewrite of the Rand
.I NED
editor of many years back.  The current version (E19+) has been
improved to take advantage of terminals that have the ability to
do local insert/delete line, and it can now use
.I termcap
or
.I terminfo
so that most terminals with direct cursor addressing can be used.
.PP
Please note that this manual entry does not try to be either a
tutorial or a full reference manual for the editor.  Rand users
should initially learn
.I E
by reading the RAND document
.I Self Teaching Guide to RAND's Text Processor, 1986,
available from
.I https://rand.org
as N-2056-1.
Report N-2239-1,
.I The RAND Editor e: Version 19, 1986,
is a full reference manual for the editor,
and is mostly correct for this version.
Two other useful reports
are R-2000-ARPA,
.I A Guide to NED: A New On-Line Computer Editor, 1977
and
R-2176-ARPA,
.I The CRT Text Editor NED -- Introduction and Reference Manual, 1977.
.PP
The
.I mainfile
on the command line is the file which is initially displayed
in the editor.  If the file doesn't exist, the user will be asked if
it should be created.  If in addition, an
.I altfile
is specified on the command line, it will be read in as the
initial alternate file.  If no filenames are present on the
command line,
.I e
will attempt to continue from your previous editing session.
To do this it saves "state" in a file called '.es1' in your
current working directory.
Before invoking the editor, be
sure and specify your terminal type by setting the
.SM TERM
environment variable.
.PP
Refer to section
.SM RECENT CHANGES
for a list of new changes to E.

.SH OPTIONS
The currently available command line options are:
.TP
.B \-help
.br
This causes a display of the currently available
options and their values along with the version number
of the editor.
.TP
.BR \-bullets " or " \-nobullets
.br
Options \-bullets and \-nobullets forces border bullets on or off
regardless of line speed or terminal type.  Line speeds of 1200
baud and slower and some terminal types set border bullets off in
the absence of these options.
.TP
.B \-create
.br
If the file named on the command line does not exist, the editor
will ordinarily ask if you want to create it.
This option causes the editor to create the file immediately,
without asking.
.TP
.B \-newfilemode=mode
If the editor creates a new file, it will be created with mode "mode".
This is of the typical UNIX octal form, e.g. "0644".
.TP
.B \-debug=filename
.br
The \-debug option causes the editor to write debugging information
to the file "filename".
.TP
.B \-inplace
.br
Option \-inplace preserves file links except for singly\-linked
files.  From within the editor, link preservation can be
turned on and off, even for singly\-linked files, by the update
command.
.TP
.B \-terminal=termtype
.br
Option \-terminal=termtype identifies the terminal type explicitly.
In the absence of the \-terminal option the terminal type is retrieved
from the
.SM TERM
environment variable.
.PP
.RS
If there is no compiled\-in code for the terminal, the termcap entry
for the terminal type will be used and the "standard" keyboard will
be assigned.  Refer to
.SM "TERMINALS SUPPORTED"
section of this document for terminals that can
be supported by compiled\-in code (varies with installation).
.RE
.PP
.B \-keyboard=termtype
.br
.B \-dkeyboard
.RS
Option \-keyboard=termtype sets the keyboard type to "termtype".  It
overrides any "\-terminal=" argument and also any
.SM EKBD
environment variable.
Option \-dkeyboard sets the keyboard type to "standard".
This is a shortcut for "\-keyboard=standard".
.RE
.ne 2v
.TP
.B \-dtermcap
.br
Option \-dtermcap forces
.I E
to use the termcap entry for the terminal
identified by the
.SM TERM
variable or \-terminal option, disregarding
any applicable compiled-in code.
.TP
.B \-notracks
.br
Option \-notracks will allow you to edit a file without using or
disturbing the work files (keys, state, and change files) from your
previous session.
.TP
.B \-replay=filename
.br
Option \-replay=filename allows you to replay with a specified keys
file, where "filename" represents that keys file.  Use \-silent when
the replay display is not desired.  The message "***replay
completed" or "***replay aborted" signals the end of the replay.
The
.SM <INT>
key can be used to stop the replay short of completion.
Files .ec1* and .ek1* must not be present if the replay is to
work.
.TP
.B \-norecover
.br
Option \-norecover will open the edit session as defined by the .es1
state file, ignoring any recovery processing of a prior crashed or
aborted session.
.TP
.B \-regexp
.br
Option \-regexp enables regular expression
pattern matching for searching
and replacing.  This mode is also enabled by the "re[gexp]" command.
In regular expression mode, "RE"
is displayed at the bottom of the screen.  The command "\-re[gexp]"
returns to non-regular expression mode.
The regular expressions recognized are
essentially the same as that for \fIed\fR.

.TP
.B \-state=filename
.br
Option \-state=filename causes the initial state of the editor to be
read from the indicated "state" file.  The state file from a previous
\fIE\fR session (with alternate files, windows, cursor positioning,
etc.) may be saved by exiting, and renaming the state file (".es1").
.TP
.B \-[no]stick
.br
Option \-stick sets the behavior at the right margin to stop in response
to text or a <RIGHT\ ARROW>.  \-nostick is the default, and will automatically
shift the window right in response to text or the <RIGHT\ ARROW> key.
.TP
.B \-readonly
.br
Option \-readonly will prohibit any changes to the file(s).
.TP
.B \-noreadonly
.br
Option \-noreadonly will disable the (new e19) mechanism
preventing changes to
files lacking write permission, that you could previously change
because you had write permission in the directory.
.TP
.B \-noprofile
.br
Option \-noprofile will prevent reading of the ".e_profile".
(See \fIcaveat\fR under
.SM STARTUP FILE.
.TP
.B \-profile=file
.br
Specifies the profile to be used in lieu of the default "./.e_profile" or
"~/.e_profile".
See
.SM "STARTUP FILE"
in a later section.
.TP
.B \-blanks
.br
Expands tabs to blanks.  The keyletters
.SM BL
are be displayed at the bottom of the screen.
.TP
.B \-literal
.br
Displays tabs in ^I notation.  The keyletters
.SM LIT
are displayed at the bottom of the screen.
.TP
.B \-tabs
.br
Don't convert tabs to blanks.  The keyletters
.SM TAB
are displayed at the bottom of the screen.
.TP
.B \-nostrip
.br
Do not remove blanks at the end of lines.  The keyletters
.SM NOS
are displayed at the bottom of the screen.
.TP
.B \-nolocks
.br
Turns off file locking if the editor was compiled with the
option
.SM FILELOCKING.
.TP
.B \-nomacros
.br
Prevents reading a ".e_macros" file if one exists.
See
.SM "MACROS"
in a later section.
.TP
.B \-search=string
.br
Sets the initial search string.
.PP
.SH
NEW OPTIONS IN E20
.br
.sp
.TP
.B \-nowinshift
In previous editions of the editor, creating a new window on the current
file by typing "CMD: window" would obscure one line of text in the file
with the top border of the new window.
This avoided the necessity of repainting the text in the new window by
shifting it down, which was desirable in the days of slow serial lines.
The current version of the editor shifts the new window down by one line,
to allow all of the text in the file to be visible in one window or the
other.
Option \-nowinshift causes the editor to revert to the old behavior.
.PP
These next four options control the foreground and background colors
used to highlight the areas selected by the
.SM MARK
command.  If you have 256 colors available, some values to try for the
.B \-setab=N
option are: 3, 7, 87, 136, 151, 194, and 222.

See
.SM "MOUSE SUPPORT"
for details.
.TP
.B \-bgcolor=r,g,b
.br
.TP
.B \-fgcolor=r,g,b
.br
.TP
.B \-setab=N (0-255;  0=black, 255=white)
.br
.TP
.B \-setaf=N (0-255;  0=black, 255=white)

.PP
These next options apply to mouse support.
.TP
.B \-skipmouse
.br
Do not enable mouse support.  See
.SM "MOUSE SUPPORT"
below for more details.
.TP
.B \-showbuttons
.br
This option displays clickable buttons across the bottom
of the screen that execute E functions by a mouse click.  The buttons
appear as ascii text, eg: "... +Pg/-Pg open close/-cl  pick/put ...".
A screensize greater than 90 chars is recommended.
This feature should be considered
.I experimental.
.TP
.B \-buttonfile=filename
.br
This option allows one
to customize which buttons to include, the order, and the
text label of a button.
The
.B \-showbuttons
option needs to be in effect.
The format of an entry closely matchs that of a keyboard file entry.
Example:
.sp 6p
.in +2P
"ins":<insmd>\*t# toggle insert mode
.br
"+Window":<+win>\*t# toggle insert mode
.br
.in -2P
See examples/e_button{1,2,3} for further examples.
.TP
.B \-buttonfont=N (0-255;  0=black, 255=white)
.br
This option sets the background color of buttons if the
\-showbuttons option is in effect.  The default is the same value
used for highlighting text.
Some values to try are: 3, 7, 87, 136, 151, 194, and 222.
.TP
.B \-mouseinit="initstr"
.br
Set a custom mouse initialization string.  Example:  -mouseinit="\\E[?1006;1002h".
.br
The default is "\\E[?1002h";
.TP
.B \-mousestop="resetstr"
.br
Set a custom mouse reset string.  Example:  -mousestop="\\E[?1006;1002l".
.br
The default is "\\E[?1002l";
.TP
.B \-noextnames
.br
Disable the use of extended names for TERM entries in the terminfo
capabilty database.
Recent versions of the terminfo database contain several
entries that include an XM entry that sets the mouse protocol to SGR mode.
If you're using a very old terminal emulator and you find that mouse motion
is not working, try using this option to disable use of XM entries.
By default, E sends the mouse initialzation string of "\\E[?1002h" which enables
mouse position reporting while a button is pressed and dragged.
.SH ENVIRONMENT VARIABLES
The
.SM TERM
environment variable defines the terminal type.  Refer to
.SM "TERMINALS SUPPORTED"
for those terminal which
.I e
has terminal specific code compiled in.  If there is no compiled
in code for the terminal
.I e
will look in "/etc/termcap" for
a definition of the terminal.  The \-dtermcap option will force
.I e
to use the "termcap" definition.
.PP
The environment variable
.SM EKBD
defines the keyboad type if different from the
.SM TERM
type.
The
.SM EKBFILE
environment variable points to a keyboard definition file
(see the
.I ./etc
directory in the distribution for examples)
to allow the editor to use keyboard layouts that are not built in.
If you're using both e19 and e20 and have added function key definitions
supported in e20, set the environment variable EKBFILE_NCURSES to
the e20 keyboard file definitions (see ./etc/kb_ncurses for an example).
.PP
The
.SM EDITALT
environment variable will be used as the name
of the alternate file.  If an alternate filename is given on both
the command line and with the
.SM EDITALT
variable, the command line file is used.
.PP
The
.SM EPROFILE (or EPROFILE20)
environment variable will be used as the name of the "startup" file, in lieu
of "./.e_profile" or "~/.e_profile".
The \%EPROFILE20 "startup" file can contain options and commands unique to
e20.  If both \%EPROFILE and \%EPROFILE20 are set, the latter is examined first.
The command line option
\-profile=file wins if both are used.
.PP
The
.SM E_ETCDIR
environment variable overrides the editor's built-in notion of the "etc"
directory (normally
.I /usr/local/lib/e\c
).  This is useful for installations where management will not allow
the installation of a random user's files into the system's
.I /etc
directory.
This is not generally an issue today, when desktop boxes are unique
to each user.
.SH FILES
.I E
creates and maintains several ".e" files.  They are used
to keep track of the current editing session and can normally
be ignored by the user.  The following information is for the
curious.
.PP
File .es1 contains state information on the last edit session.  It
is created or updated at the end of a normally terminated edit
session.
.PP
File .ec1 indicates the last edit session in this directory
crashed.
.PP
File .ek1 contains a history of the last edit sessions keyboard
inputs.  The .ek1 file is updated at regular intervals so that a
mimimum of work is lost on edit or system crashes.
.PP
File .ek1b is the .ek1 file prior to a recovery replay.
.PP
The presence of any .ek1* file indicates that the last session in
this directory abnormally terminated and that the next edit session
will do recovery processing unless option \-norecover is used.
File .ek1 means abort, .ec1 means crash.
.PP
Note that if the login user is not the owner of the current
directory the above files will be suffixed with the login users
name.  If the user has no write permission in the current
directory, these files are created in the directory /tmp/etmp.
.PP
There are also a few utility files in the directory /etc/e.
.SH PSEUDO-FILES
.I E
maintains two pseudo-files,
.B #o
and
.B #p.
Neither of these represent actual files in the filesystem.
.B #o
contains all the text which has been <CLOSE>d from the file
currently being edited.
.B #p
contains all the text which has been <PICK>ed from the file
currently being edited.
To make use of these pseudo-files, type
.B <CMD>e #o
or
.B <CMD>e #p
as if these were normal files.
The edit window will switch to the corresponding pseudo-file,
where you may examine or <PICK> text at will.
Typing <ALT> (^X\-A on the standard keyboard) will switch back
to the file being edited.
.SH RECENT CHANGES
.nr x \n(.i
.nr y \w'\(bu\0\0'
.de bu
.in \\nxu+\\nyu
.ti \\nxu
\(bu\0\0\c
..
E20 changes include:
.bu
code cleanup eliminating compiler warnings; bug fixes
.bu
now allows
editing of a filename that contains embedded spaces.
.br
Example:  CMD: e "my file" or CMD: e my\\ file.
.bu
new crash recover options, allowing playback to stop early
.bu
revised state file (.es1.userid.host) to restore the settings
and options when resuming a previous E session (ie, when E is
started without a filename).
.bu
added mouse support to:  move cursor, change windows, and press/drag
left button to mark a rectangular area
.bu
added color options to highlight marked areas.
.bu
added brace matching mode;
when enabled, resting the cursor on a open/closing brace will highlight the
corresponding closing/opening brace.  If the matching brace is not in the
current window, the column and row number of the location will be displayed
in the info window.
By default, the search range is \(+- 100 lines. The
.B \-set brace range N
option changes the range (a value of 0 removes the limit).
If the range is 0, the search range is the beginning or end of file.
See the
.I set options
section below.
.bu
added the
.B -showbuttons
option to display clickable function buttons
.bu
added keyboard file options to map F1-12 function keys to E commands,
examples:  KEY_F2:<redraw>, SHIFT_F4:<+word>, CTRL_F4:<-word>;
see etc/kb_ncurses for other examples.
The environemnt variable EKBFILE_NCURSES may be set to a custom e20 kbfile
for sites using both e19 and e20.
Note that some terminal emulators use a few function keys for their
own purposes, eg: gnome-terminal uses F1 for a Help menu, and F11 to
toggle full screen mode.
.PP
E19+ changes include:
.bu
new options \fB\-tab, \-lit, \-nostrip, \-nolocks\fR.
.bu
better keystroke file handling (for BSD systems the keystroke
file is automatically updated after 1 min. of inactivity).
.bu
temp files:  a compile option for the name to be .esN.login.hostname;
and a compile option to save them after a successful recovery.
.bu
files are no longer limited to 32767 lines (LA package revised).
.bu
a facility to record and playback keystrokes at a later time.
.PP
E19 changes include:
.bu
a word processing mode (WP) that currently features "word wrap" and support
for a "left margin";
.bu
a "startup" file mechanism (e.g., ~/.e_profile) to individually tailor
options; also provides support for "editor scripts"
.bu
a delete word function;
.bu
options to control the behavior when text is typed past the right edge of
the window;
.bu
an alternate syntax for the "goto" command;
.bu
display of tab settings on the top border, and left and
right margin (width) settings on the bottom border;
.bu
an option for invoking \fIE\fR with a previous state file;
.bu
a new help facility;
.bu
improved support for the "track" command;
.bu
a new command "caps" to convert lower case to upper case;
.bu
a new command "ccase" to reverse the case of the affected text;
.bu
changes to \fIfill/just\fR to no longer filter out CTRL chars,
and (by default) not split hyphenated words at the end of a line;
.bu
a new "\-readonly" option to prevent unintentional changes; files
that are not writable cannot be modified;
.bu
improved VT100 terminal support; and terminal drivers for the Beehive
MicroBee, Televideo 910, Liberty Freedom 100, and Wyse 50.
.bu
the sequence "<CMD><WINRIGHT>" now shifts the window far enough right to
display the end of the current line (previously, this sequence would set
the left edge of the window at the cursor position).
.bu
bug fix: if an \fIaltfile\fR was specified on the command line,
and the environment variable EDITALT was set, the \fIaltfile\fR is now used
.PP
E18 changes include:
.bu
support for regular expression searching and replacing;
.bu
implementation of the
.SM +WORD
and
.SM \-WORD
functions;
.bu
a new \fBset\fR command to individually tailor various parameters (e.g.,
the number of cols a <WIN RIGHT> will shift;
.bu
support for symbolic links (the link is read and the referenced file is used);
.bu
now runs on System III, System V, and 68000s;
.bu
commands that specify filenames (e.g., "
.SM CMD:
e \fIfile\fR expands a leading "~" to the appropriate home directory;
.bu
compiled in code for Ann Arbor Ambassadors now downloads the
standard keyboard into the function keys;
.bu
support added for Sun2 workstation.
.SH MOUSE SUPPORT
The current (2021) rework of the editor has introduced elementary
support for the mouse.
The cursor may be moved arbitrarily by clicking the left mouse button in any window.
If multiple windows are active in E, clicking in a non-active window will change E's
focus to that window.  Dragging with the left mouse button will mark rectangular areas
of text.  Setting the environment variable TERM=xterm-256color is recommended to make
use of full color support.
.PP
If you find that dragging the mouse does not work, try setting TERM to one of these:
xterm-color, xterm-1002, or xterm-x11mouse. Alternatively, the terminfo file
e20/terminfo/xterm-256color-a.src can be compiled and installed with 'tic'
creating the file ~/.terminfo/x/xterm-256color.
(N.B. The "/x/" in this path may be
replaced with an alternative directory name, .e.g. "/78/", depending on the
version of "tic" you are using.)
The xterm-256color-a.src file contain modified
XM and kmous entries that work with older terminal emulators.
.PP
The
.SM MARK
command, described in the
.SM COMMANDS
section below, is used to select rectangular areas of text for use in
a subsequent command.
The middle mouse button can be used to start the beginning of a
marked area or to cancel the marked area.
A marked area is normally expanded or reduced
by cursor movement (arrow keys, \(+-\|page, \(+-\|line);
the area can now also be changed by clicking the
left mouse button.
.PP
The ability to copy/paste text from a separate desktop window into an
E window can be very useful.
One method to copy/paste text into an E window is to
hold down the Shift key before doing the paste.
An alternate method is to temporarily disable the mouse in E by
issuing the
.I "set mouse off"
command to disable the mouse in E, perform the copy/paste into
E, then reenable the mouse with the command
.I set mouse on.
See the
.SM SET
command section below.
Another method is to define a function key in a keyboard file
to toggle the mouse on/off.  Example:  KEY_F6:<mouse>.
.SH HIGHLIGHTING
By default, areas selected using the
.SM MARK
command are highlighted with black text on a light gray background.
The foreground and background colors may be set by one of two
command line option pairs. To choose colors using the RGB
color system (red, blue, green), use options:
.sp 4p
.in +2m
.I \-bgcolor=r,g,b,
(background)
and
.br
.I \-fgcolor=r,g,b
(foreground).
.in -2m
.PP
To choose colors using a terminal's built-in colors, use options:
.sp 4p
.in +2m
.I \-setab=N
(background),
and
.br
.I \-setaf=N
(foreground).
.in -2m
.PP
For the RGB method, each
.I r, g, b
number may range from 0 to 999; higher numbers specify lighter colors.
0,0,0 specifies black; 999,999,999 specifies white.
For a terminal's built-in method,
.I N
may range from 0 (white) to 255 (black).
The colors from 1 to 254 may vary.
.PP
Since many desktop terminals support 256 colors, it is recommended
that custom colors be specified using a terminal's built-in colors:
.I \-setab
and
.I \-setaf.
The default editor values are:
.I \-setab=7
and
.I \-setaf=0.
The utilities
.I colorhints
and
.I txcolor,
distributed with the editor, may give hints on selecting values for
a terminal.
.SH MACROS
The editor has elementary support for macros.
This support is in the form of a "record/play" capability.
As documented in the section "COMMANDS", the editor supports "record",
"play", and "store" commands.  The command \fI<cmd>record\fR begins
recording editor commands and typed text, until a second \fI<cmd>record\fR
command is given.  
The command \fI<cmd>-record\fR will also stop recording;
the first version is provided so that it may be assigned
to a key via a keyboard description file which can be used
both to start and stop a macro recording.
The macro that has been recorded may then be replayed
by the command \fI<cmd>play [N]\fR. The optional count \fIN\fR gives the
number of times the macro should be replayed; once is the default.
The macro thus recorded may be assigned
a name by executing \fI<cmd>store [name]\fR. The named macros may
be replayed by the command \fI<cmd>$name [N]\fR.
.br
Macros may be saved to a file.
This is done via the \fIupdate macros\fR editor command.
The file is named, by default, "~/.e_macros".
This name may be overridden either by the environment variable
.SM EMACROFILE
or by means of the "\-macrofile=filename" command line option.
This file will be read in automatically.
The command line option "\-nomacros" prevents this.
The command \fI<cmd>undefine macroname\fR is used to remove a macro
definition,  which is useful prior to
issuing the "<cmd>update macros" command to remove a definition
from the \fI.e_macros\fR file.
.SH COMMANDS
The following commands are available to the user by opening the
command line via the
.SM <CMD>
key and entering the command.  The
entered command is parsed and executed when the
.SM <RETURN>
key is typed.

In the following discussion, pound sign ("#") introduces a comment,
brackets ("[","]") indicate options, and vertical bar ("|")
indicates optional choices.

There are two types of areas: a range of lines (indicated by
<range>) and a marked retangle of text (indicated by <rectangle>).
Some commands will take either type of area, this is indicated by
<area>.
A <range> can be specified either by marking
or by a number followed by "l" for lines or "p" for paragraphs;
rectangular areas must be marked.  The default range is one line
for most commands (fill, adjust and center default to one
paragraph).
.PP
.TP
b | bye | ex | exit [ nosave | quit | abort | dump ]
.br
Exit the editor.  The different exit options affect
whether or not the editor updates the edited files
or not, and whether the ".e" state files are changed.
The following table give the complete exit story.
.\".ta 1P+\w'exit nosave\ \ \ 'u +\w'Saves\ \ \ 'u +\w'Update\ \ \ 'u +\w'Keys\ file\ \ \ 'u
.ta 1P+\w'exit nosave'u+1P +\w'Saves'u+1P +\w'Update'u+1P +\w'Keys\ file'u+1P
.RS
.sp
.ds t \t
\*tSaves\*tUpdate\*tRemove\*tRemove
.br
\*tFiles\*tState\*tKeys\ file\*tChange file
.br
.ta 18p+\w'exit nosave'u+1P +\w'Saves'u+1P +\w'Update'u+18p +\w'Keys\ file'u+1P
.sp
exit\*tX\*tX\*tX\*tX
.br
exit nosave\*t-\*tX\*tX\*tX
.br
exit quit\*t-\*t-\*tX\*tX
.br
exit abort\*t-\*t-\*t-\*tX
.br
exit dump\*t-\*t-\*t-\*t-
.RE
.ta \w'underlay\ \ \ \ 'u
.sp
blot	adjust | close | erase | pick | run | box
.br
\-blot	adjust | close | erase | pick | run | box
.br
cover	adjust | close | erase | pick | run | box
.br
insert	adjust | close | erase | pick | run | box
.br
overlay	adjust | close | erase | pick | run | box
.br
underlay	adjust | close | erase | pick | run | box
.RS
.PP
All of these commands take the named buffer (one of
adjust, close, erase, pick, run, or box) and add or
merge it into the current file.
.PP
Insert takes the named buffer, moves the existing text
to make room for it, and then inserts it at the
current text location.  It is identical to the \-pick
command, except that now the other named buffers can
also be inserted.
.PP
Cover places the named buffer over top of the text without
moving anything.
.PP
Overlay is like cover, except that only the printing
characters in the buffer clobber the original text.
.PP
Underlay is the reverse of overlay, i.e. the buffer covers
only the non-printing characters of the original text.
.PP
Blot is like overlay except that positions in the file
corresponding to printing characters in the buffer are erased.
.PP
\-blot is like blot except that positions in the file
corresponding to blanks in the buffer are erased.
.PP
Not all of the combinations listed above have been implemented.
.RE
.TP
box <rectangle>
.br
Draws a box around the rectangle with "+", "|", and "-" characters.
.PP
caps <rectangle>
.br
.RS
Caps changes the "target text" to all upper case characters (only the
characters a-z are affected).  The \fImark\fR command is first used
to define the "target text".
.RE
.PP
ccase <rectangle>
.br
.RS
Ccase changes all upper case to lower case and vice versa.  The
affected area is first defined by the \fImark\fR command.
.RE
.PP
center  [<range>] width=n
.br
fill    [<range>] width=n
.br
justify [<range>] width=n
.br
.RS
These commands all act upon the range of text and
then replace them with the modified results.  Center
centers the text around the column (width/2), fill
places as many words as possible on each line, and
justify is like fill except that it also provides a
smooth right-margin by embedding blanks.  The old text
is saved in the adjust buffer.  As of e19, fill/just
no longer
filters out CTRL characters, and no longer splits
hyphenated words at the end of a line.  The command
"CMD: set hy" will reinstate splitting.
.RE
.PP
close [<area>]
.br
\-close
.br
.RS
Close deletes the text from the file and remembers it
in a "close buffer", \-close puts the close buffer
back into the file at the current cursor position.
.RE
.PP
command
.br
\-command
.br
.RS
Usually you issue commands one at a time by typing
the
.SM <CMD>
key, the command, and then
.SM <RETURN>.
The "command" command places you in a mode where
you can keep typing commands without hitting the
.SM <CMD>
key each time.  To return to normal edit mode,
issue the \%\-command command.
.RE
.TP
delete
.br
Tells the editor to delete the current file on exit.
.PP
dword
.br
\-dword
.br
.RS
Delete word.  If the cursor is "on" a word, that word
is deleted, othwise the next word is deleted.
The deleted word can be restored by \-dword.
.RE
.TP
e | edit  [<filename>]
.br
If no filename is specified, the alternate file (if
any) is brought up in the current window.  Otherwise
the specified file is displayed.  If \fIfilename\fR
begins with "~" or "~/", the appropriate home
directory is prepended.
.PP
erase  [<area>]
.br
\-erase
.br
.RS
Erase replaces the area by blanks and puts the contents
into an "erase" buffer; \-erase inserts the contents of this
buffer at the current cursor position.
.RE
.TP
feed [<range>] command-string
A Unix shell is started with the command-string, and the
text in <range> is supplied to the shell as the standard
input.  Any results of the command are inserted before
the first line in the range.
.TP
goto [ b | line\-number | e | rb | re ]
.br
Goto is a quick way of moving around a file.  Goto 'b'
moves to the beginning of the file, 'e' moves to the end.
A line-number goes to that line of the file; 'rb' and 're'
move to the beginning or end of a marked range (see the
range command).  A short-cut to goto line-number \fIn\fR
is "CMD: \fIn\fR<RETURN>".
.RE
.TP
help
.br
Help will clear the screen and (for some terminal types)
show a map of the keyboard layout of the standard keyboard,
showing the command tied to each keycap.
The user may then type any control character, and a short
paragraph documenting the associated command will be shown.
Note that the keyboard shown does not reflect any optional
keyboard file in use, for example by means of the EKBFILE
environment variable.
.PP
join | \-split
.br
split | \-join
.br
.RS
Join (or \-split) combines two lines, split (or \-join)
breaks a line in two.
.RE
.TP
?macros
Lists macros which have been saved by the \fIstore\fR command.
.TP
?macros [X]
Shows the keystrokes which have been stored in macro X by
the \fIstore\fR command.
.TP
name <newfilename>
.br
Tells the editor to rename the current file to newfilename
when it exits.
.TP
open [<area>]
.br
Move existing text to make room for <area> worth of
blank lines (or a rectangle of blanks).
.PP
pick [<area>]
.br
\-pick
.br
.RS
Pick copies the <area> to a pick buffer, \-pick
inserts the pick buffer at the current cursor position.
.RE
.TP
play [N]
Begin playback of a recording, once or \fIN\fR times.
.PP
range [<range>]
.br
\-range
.br
?range
.br
.RS
The range command is another method of limiting the
range of some commands (notably the replace, fill,
justify and center commands).  \-range turns it off,
?range tells you the line numbers of the range area.
.RE
.PP
record
.br
\-record
.RS
Begin (or end) saving keystrokes for later playback using
the \fIplay\fR command.
In recording mode, the only mouse clicks saved in a recording
are button clicks while in
.B \-showbuttons
mode.  A mouse click in a window area is ignored while recording.
.RE
.TP
redraw | red
.br
The redraw command is used to erase and redraw the editor
windows in case something has happened to it (for example,
line noise on dialup lines, or messages from the operator).
.PP
replace  [<range>] [<option>] /search-string/replace-string/
.br
\-replace [<range>] [<option>] /search-string/replace-string/
.br
.RS
The replace command searches forward over the range
replacing the search-string
with the replace-string; \-replace searches backwards
doing the same thing.  The '/' delimiter can be replaced by
other symbols if the search or replace strings contain a slash.
Any non-control, non-alphanumeric character can be used as the
delimiter.
.PP
Two options can also be specified, they are
.I show
and
.I interactive.
The
.I show
option allows the user to see the replacements as they occur.  The
.I interactive
option additionally allows the user control over whether or not
to make each replacement by displaying the search-string and allowing
the user to hit the <REPL> key to do replacement, or the
.ie t <\(+-SRCH>
.el <+/-SRCH>
key to skip the replacement.
.RE
.TP
regexp
.br
\-regexp
.RS
The "regexp" command enters regular expression mode (for searching
and replacing); "\-regexp" exits regular expression mode.
While in regular expression mode, "RE" is displayed at the bottom
of the screen.
.RE
.TP
run [<range>] command-string
.br
The run command is similar to the feed command, except
that the marked text is deleted and
replaced by the results of running the
command-string.
.TP
save <newfilename>
.br
Immediately write a copy of the file to newfilename.
.\" new page to keep the following options together
\.".bp
.PP
set \fIoption\fR
.br
?set
.br
.RS
used to set various options:
.ds t \t
.nr ,i \w'wordelim \fImode\fR'u+1P
.ta \n(,iu +1P
.nf
.sp 4p
{}\*ton\^|\^off, toggles brace matching mode (shortcut)
bracematch\*ton\^|\^off, toggles brace matching on/off
brace range \fIn\fR\*tsets brace matching range to \fIn\fR lines (default: 100)
brace ?\*tshows the brace range value (default: 100 lines)
\*tsetting the limit to 0 (or "off") extends the search to the end of file.
brace coding\*ton\^|\^off, sets brace matching to "coding" mode where a
\*tsearch stops at the end of the current function(); assumes that
\*ta curly brace in column one ends a function() definition.
+line \fIn\fR\*tsets the <+line> key to \fIn\fR lines
\-line \fIn\fR\*tsets the <\-line> key to \fIn\fR lines
line \fIn\fR\*tsets the <+line> and <\-line> keys to \fIn\fR lines
+page \fIn\fR\*tsets the <+page> key to \fIn\fR screens
\-page \fIn\fR\*tsets the <\-page> key to \fIn\fR screens
page \fIn\fR\*tsets the <\-page> and <+page> keys to \fIn\fR screens
?\*tdisplays the values of several options (same as the "?set" command)
bell\*tenable the bell
nofilldot\*ta fill cmd with no parameters will stop at a line beginning
\*t  with a period (this is the new default)
filldot\*tfill will not stop at lines beginning with a period (as before)
nobell\*tdisable the bell
highlight\*tset mode to: on\^|\^off\^|\^color\^|\^bold\^|\^rev
hy\*tenables splitting of hyphenated words by fill/just
nohy\*tdisables splitting of hyphenated words by fill/just (default)
left \fIn\fR\*tsets the <window left> key to \fIn\fR cols
lmar \fIn\fR\*tsets the left margin to \fIn\fR
mouse\*ton\^|\^off \0enable/disable mouse
right \fIn\fR\*tsets the <window right> key to \fIn\fR cols
rmar \fIn\fR\*tsets the right margin (linewidth) to \fIn\fR
window \fIn\fR\*tsets the <window left> and <window right> keys to \fIn\fR cols
width \fIn\fR\*tsets the linewidth to \fIn\fR cols (for fill, etc.)
wordelim \fImode\fR\*tsets the action of the <+word> and <\-word> keys.
.br
.fi
.in \n(.iu+\n(,iu
If mode is \fIwhitespace\fR (the default), words are delimited by blanks
and newlines, and the cursor advances to the first character following
the delimiter.
If mode is \fIalphanum\fR, words are delimited by all
special characters in addition to blanks and newlines,
and the cursor advances to the first alphanumeric character
following the delimiter.
.fi
.br
.sp 6p
.in
The "line", "page", and "window" options may be individually set in
different windows.
.RE
.TP
stop
.br
Use 'job control' to suspend the editor.  Returns control
to the shell, resume with the 'fg' command.
Works under most modern operating systems.
.PP
store X
.RS
Save the current recording in a macro named X for later playback by
"<cmd> $X [N]", which inserts the contents of macro X
at the current cursor position, once or \fIN\fR times.
Up to ten macros may be stored for playback.

.RE
.PP
tab  [ column ... ]
.br
\-tab [ column ... ]
.br
.RS
Tab sets tabs in the specified columns; \-tab
removes tabs in specified columns.
.RE
.PP
tabs n
.br
\-tabs
.br
.RS
Tabs sets tabs every nth column, and \-tabs
removes all tabs.
.RE
.PP
tabfile tabfilename
.br
\-tabfile tabfilename
.br
.RS
Tabfile sets tabs (\-tabfile clears tabs) at every
column listed in the tabfilename.
.RE
.PP
track
.br
\-track
.br
.RS
The track command is used to scroll the main and
alternate files together.  This is normally used
to visually compare the main file and the alternate
file by rapidly changing between them and
watching what changes on the screen (similar to
blink-comparators as used in astronomy).  The \-track
command turns off the tracking mode.
As of e19,
the TRACK flag has been
made part of the state of each window, so that the TRACK mode can be
reestablished following an interruption, and the TRACK command has been
changed so that it toggles the TRACK mode, in the same way as does
INSERT.
.RE
.TP
undefine macroname
.br
Removes macroname.  This command is useful
prior to issuing the "update macros" command
to remove a macro definition from the \fI.e_macros\fR file.
.RE
.TP
update | \-update [ inplace | \-inplace | \-readonly | macros]
.br
The update command tells the editor what to do on
exit with the current file.  The update command
can be used to specify whether or not to break
links, the \-update command causes any changes to
the current file to be ignored.
The \-\fIreadonly\fR option is used to enable modifications to
files which (1) you own but lack write permission on,
or, (2) to override a "\-readonly" invocation argument.
The \fImacros\fR option causes any defined macros to be
saved to the macros file as specified in the section
.SM MACROS.
.PP
w | window [filename]
.br
\-w | \-window
.br
.RS
The window command will create a new window at the
current cursor position (as long as the cursor
is along the top or left margins).
If a filename is specified, that
file is displayed in the new window, otherwise the
current file is used.  The \-window command deletes
the current window.
.RE
.PP
wp
.br
\-wp
.br
.RS
The \fIwp\fR command enters word procesing mode, \fI\-wp\fR
exits.  A
.SM WP
is displayed at the bottom of the screen in word processing mode.
.SM WP
mode enables power typing or "word wrap", where any text that is
entered past the right margin (see "set rmar" above) is automatically
placed on the following line at the left margin (see "set lmar" above).
.SM WP
mode also moves the cursor to the left margin in response to a <RETURN>.
If
.SM WP
mode is entered while a marked area is in effect, the boundaries of
the marked area become the left and right margin settings.
.RE
.SH FUNCTION KEYS
E supports a set of \fIfunctions\fR that are normally executed by hitting one
of the terminal functions keys, or by typing a specific control- or
escape sequence.  Details of what \fIE-functions\fR are emitted for a specific
terminal's function key layout are hard to document generally, since each
site usually tailor's this to their liking.  Your system administrator should
be able to provide a mapping.  Also, see the following sections
\fIStandard Editior Keyboard\fR and \fITerminals/Keyboards Supported\fR.
Note that some \fIE-functions\fR require first pressing the <CMD> key
followed by another <KEY>.  Refer to the previous section "COMMANDS" for
a discussion of the following functions:
<CLOSE>, <OPEN>, <PICK>, <ERASE>, and <MARK> which
are normally implemented on function keys.  The sequences <CMD><CLOSE>,
<CMD><PICK> and <CMD><ERASE> are documented above as \fI\-close, \-pick, \fRand
\fI\-erase\fR.
.TP .75i
.ie t \{\
. ds UA \(ua
. ds LA \(<-
. ds RA \(->
. ds DA \(da
.\}
.el \{\
. ds UA UP-ARROW
. ds LA LT-ARROW
. ds RA RT-ARROW
. ds DA DN-ARROW
.\}
<\*(LA> | <\*(UA> | <\*(DA> | <\*(RA>
The arrow keys move one space (or line) in the indicated direction.  An <\*(UA> on
the top line of the window (or <\*(DA> on the bottom line) scrolls the window
down (or up) one line.  A <\*(LA> at the left edge of a window does nothing.
A <\*(RA> at the right edge of a window does nothing if option \%\-\fIstick\fR
is set, otherwise the window is shifted right (16 spaces by default).
.TP
<+LINE>, <+LINE>
scrolls window down/up about 1/4 the window size.
.TP
<CMD><+LINE>, <CMD><\-LINE>
makes the current
cursor line the top (or bottom) line of the window.
.TP
<+PAGE>, <\-PAGE>
scrolls window down/up a full "page".
.TP
<CMD><+PAGE>, <CMD><\-PAGE>
moves to the end/beginning of the file.
.TP
<+SRCH>, <\-SRCH>
searches in the indicated direction for the next occurrence of the "search string".
The \fIsearch string\fR is set by <CMD>\|search string\|\c
.ie t <\(+-SRCH>.
.el <+/-SRCH>.
.TP
<CMD><+SRCH>, <CMD><\-SRCH>
sets the "search string" to the current cursor word, and performs a search
in the indicated direction.
.TP
<+TAB>, <\-TAB>
tabs in indicated direction.
.TP
<+WORD>, <\-WORD>
moves to next/previous word.
.TP
<ALT>
switch to alternate file, also "<CMD>e<RETURN>".
.TP
<BS>
backspace, moves left and erases previous character.
<CMD><BS>
deletes text from the beginning of the line up to the current cursor character.
In \fIinsert mode\fR, the rest of the line is moved left.
.ne 3v
.TP
<CHWIN>
change to next window.
.ne 2v
.TP
<CTRLCHAR>
used to enter non-ascii characters (\e000\-\e037) in text.
.TP
<DELCHAR>
deletes cursor character.
.TP
<CMD><DELCHAR>
deletes text from the cursor to the end of the line.
.TP
<HOME>
moves to upper left corner of window.
.TP
<INSERT>
toggles \fIinsert\fR mode.
.TP
<INT>
Interrupts the operation of various functions: e.g., searches.
.TP
<MARK>
used to define a range of lines or rectangular area of text.  A simple
<MARK> will start by defining one \fIline\fR.  Moving the cursor up/down will
extend the defined range of \fIlines\fR (as will other keys like <+LINE>
<+PAGE>).  When full lines are \fImarked\fR, the message "MARK \fIn\fR" is displayed
at the bottom of the screen.  Rectangular areas of text are marked by first
marking one or more lines, then moving the cursor left or right.  When a
rectangular area is marked, the message "MARK \|\fIlines\fR\|x\|\fIcols\fR" is
displayed.
.TP
<CMD><MARK>
cancels any mark in affect.
.TP
<REPL>
Executes the "replacement" while doing an interactive replace command.
.TP
<RETURN>
Positions cursor at column 1 on the next line.  A <RETURN> on the bottom line
of a window is equivalent to a <+LINE>.  In WP mode, a <RETURN> positions the
cursor at the current \fIleft margin\fR on the next line, which may automatically
shift the window left.
.TP
<WINLEFT>, <WINRIGHT>
Shifts the window left/right (16 spaces by default).
.TP
<CMD><WINLEFT>
Shifts the window all the way back to column 1.
.TP
<CMD><WINRIGHT>
Shifts the window as far right as necessary to display the end of the line.
.bp
.SH STANDARD EDITOR KEYBOARD
.PP
There is now a "standard" E keyboard, that is designed to be usable
on all video display terminals.  Either say "e \-keyboard=standard" or
"setenv
.SM EKBD
standard" before running E to select this keyboard.
This is also the keyboard that E will use if there is no specific knowledge
of your type of terminal compiled into the editor.
.PP
This keyboard layout is designed to be used on terminals with no
function keys. "^H" means control\-H, and "^X\-^U" means control\-X
followed by control\-U.  The ALT entry gives you a choice of "^/"
or "^_" because one or the other or both will not work on some
terminals. ("_" is correct ASCII.)
.sp 2
.so e.stdkey.out
.\".bp
.ps 10
.vs 12
.SH TERMINALS/KEYBOARDS SUPPORTED
.sp
This is installation specific information with the actual terminal
types defined varying across the host cpu's versions of the editor.
Now that the editor can be driven from termcap and the standard
keyboard, many sites will wish to delete specific terminal type
support to save memory.  (N.b: These days, the amount of memory thus
saved is several orders of magnitude less than anybody would conceivably
be worried about). Code is provided with E for the
following terminals and may be compiled into your version.
.PP
Also, note that the
.SM EKBFILE
environment variable may be used to redefine the keyboard at will
on an individual user basis.
.sp

.so e.term.out
.SH PLATFORMS SUPPORTED
.sp
This version of the editor has been ported to, and tested on,
Linux systems (specifically CentOS) and Mac systems (specifically
Mojave and Catalina).
It is not a "clickable" app; it must be run in a terminal window.
.PP
The Linux version has been run under the Linux subsystem (specifically
Ubuntu) on Windows 10,
but has not been extensively tested there.  Or, really, tested at all.
.PP
To build the distribution on a given platform, read the
.SM README.md
file in the GitHub distribution.
In brief, look in the top-level Makefile file
to find the target for your platform ("sys5" for Linux, "bsd" for Mac).
Then, read the e19/Makefile file to see what reconfiguration must be
done to build your target.
"e" was built long, long before the
.I config
utility was developed.
.SH STARTUP FILE
.sp
As a means of individually tailoring various options on startup, E will
run commands specified in a "profile" file.  The order in which E
decides which "profile" file to run, is:  command line option
\-profile=\fIfile\fR,
environment variable
.SM EPROFILE20, then
environment variable
.SM EPROFILE,
a "safe" ./.\fIe_profile\fR,
~/.\fIe_profile20\fR, and finally, ~/.\fIe_profile\fR.
("./\fI.e_profile\fR" is deemed to be safe if you are not the super-user, you own
the file, and it's not writable by everyone else.)
The EPROFILE20 environment variable and ~/.\fIe_profile20\fR file are
searched first in case the original RAND editor branch is also in use.
The original editor does not support the new features of the current version.
These new features, if present in a profile file, would cause the old version
of the editor to exit with an error.
Therefore, for convenience, these new features may be placed in a profile
file that the old version of the editor will not search for.
If the first line of the profile file begins with the keyword "options:",
then the rest of the line is treated as if typed as initial arguments
to E.  The options must currently all be on one line.
.sp
Profile format notes:
.bu
blank lines and lines beginning with # are ignored
.bu
E function keys are denoted by "<keyword>";  use "\e<" to insert a "<" in text;
"<#keyword>" may be used to repeat \fIkeyword\fR #-times
.bu
keywords:
.nf
.ta .5i 1.5i 2.5i 3.5i
.ds t \t
\*t<+line>  \*t<caps>   \*t<int>     \*t<right>*
\*t<+page>  \*t<ccase>  \*t<join>    \*t<split>
\*t<+sch>   \*t<cchar>  \*t<left>*   \*t<srtab>
\*t<+tab>   \*t<chwin>  \*t<mark>    \*t<tab>
\*t<+word>  \*t<close>  \*t<mouse>   \*t<up>*
\*t<\-line> \*t<cmd>    \*t<open>    \*t<wleft>
\*t<\-mark> \*t<dchar>  \*t<pick>    \*t<wp>
\*t<\-page> \*t<down>*  \*t<play>    \*t<wright>
\*t<\-sch>  \*t<dword>  \*t<record>  \*t<null>
\*t<\-tab>  \*t<edit>   \*t<redraw>  \*t<undef>
\*t<\-word> \*t<erase>  \*t<regex>
\*t<bksp>   \*t<home>   \*t<replace>
\*t<brace>  \*t<insmd>  \*t<ret>
.sp 2p
\*t(*=cursor motion)
.fi
.bu
essentially anything that can be typed at E can be inserted in the
".e_profile".  Thus, application specific editor scripts can be created.
.bu
note that various
.SM CMD
options end with a <ret>, others don't; e.g., "<cmd>tabs 4<ret>", but
"<cmd><+page>".
.bu
E looks for a "profile" file and
examines the "options:" line \fIbefore\fR processing any command line arguments,
thus command line options override any options specified in the
"options:" line.  \fICaveat\fR: if the \-profile=file argument is used, any
"options:" in a profile file will have already been processed.  This is
a "cart before the horse" problem....
.bu
any format errors will terminate reading of the profile file, and continue
the E session;
.ne 4v
.bu
example:
.nf
.RS
options: \-regex \-stick
<cmd>tabs 4<ret>
<cmd>set window 40<ret>
.RE

There is an "examples/" directory at the top level of the distribution
which contains sample \fI.e_profile\fR and \fI.e_profile20\fR files.
.fi
.SH BUGS
.sp
By far the worst problem with E is its treatment of tabs.
E is a "whitespace" editor, all whitespace is considered
equal.  On any line that E modifies, it will compress
multiple initial blanks to tabs, strip trailing blanks,
and convert any embedded tabs to blanks.  This is acceptable
for most editing, but some programs expect real tab characters
as input, for example tbl(1) and some nroff commands.  However,
the new options \fB\-lit, \-nostrip, \-tabs\fR, and \fB\-blanks\fR
alleviate most of these problems.
.sp
The "Terminal" application on the Mac has problems with use
of the
.I -bgcolor
and
.I -fgcolor
arguments. The application does its own processing, and prevents
the specified colors from being used.  The
.I -setab
and
.I -setaf
arguments work correctly.  An alternative is to use another terminal
application on the Mac.
.I iTerm2
is known to work.
.sp
Resizing terminal windows in the parent operating system is not supported.

.SH SEE ALSO
.sp
.I
N-2056-1: SELF-TEACHING GUIDE TO RAND'S TEXT PROCESSOR, 1986,
The Rand Corporation
.sp
.I
N-2239-1: THE RAND EDITOR, e, Version 19, 1986,
The Rand Corporation.
.sp
These are available from
.I https://rand.org.
.sp
Two other documents worthy of note are R-2000-ARPA,
.I A Guide to NED: A New On-Line Computer Editor, 1977,
and
R-2176-ARPA,
.i The CRT Text Editor NED -- Introduction and Reference Manual, 1977.


.SH SPONSOR
The Rand Corporation.




